{"version":3,"sources":["requests/getViewKey.js","Containers/ViewKeyButton.js","Containers/MyLimitOrders.tsx","Containers/CreateNewLimitOrder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fromUtf8","require","client","tokenAddress","a","handleMsg","create_viewing_key","entropy","execute","response","apiKey","JSON","parse","data","key","viewing_key","ORDERS_FACTORY_ADDRESS","viewKey","setViewKey","useState","loading","setLoading","useEffect","ready","viewKeys","localStorage","getItem","accountData","address","value","Button","variant","onClick","getViewKey","setItem","stringify","Spinner","animation","tokensData","myLimitOrders","setMyLimitOrders","queryContractSmart","user_secret_order_books","init","Table","striped","bordered","hover","user_secret_order_book","map","orderBookAddress","MyLimitOrder","limitOrderData","setLimitOrderData","orderBookTokensData","setOrderBookTokensData","ammPriceData","setAmmPriceData","limitOrderPromise","get_limit_order","user_address","user_viewkey","orderBookTokenDataPromise","order_book_pair_info","Promise","all","limitOrder","orderBookTokenData","getAmmPrice","is_bid","setInterval","assetIndex","amm_pair_address","simulation","offer_asset","info","token","assets_info","amount","Math","pow","find","dst_address","contract_addr","decimals","displayBalance","index","tokenData","round","balances","decimal_places","display_props","symbol","displayPrice","type","token1Data","token2Data","price","return_amount","rowStyle","backgroundColor","status","undefined","style","Date","timestamp","toLocaleString","pairDisplay","buying","selling","tokenDataBuy","tokenDataSell","order_token_init_quant","displayDescription","withdraw_limit_order","update","arr","filter","alert","AMM_FACTORY_ADDRESS","remountMyLimitOrders","showCreateLimitOrderModal","setShowCreateLimitOrderModal","ammFactoryPairs","setAmmFactoryPairs","selectedAmmFactoryPairIndex","setSelectedAmmFactoryPairIndex","createLimitOrderLoading","setCreateLimitOrderLoading","selectedAmmPriceLoading","setSelectedAmmPairPriceLoading","selectedAmmPairPrice","setSelectedAmmPairPrice","isInstanciated","orderBookPair","setOrderBookPair","limitOrderIsBidInput","setLimitOrderIsBidInput","limitOrderAmountInput","setLimitOrderAmountInput","limitOrderPriceInput","setLimitOrderPriceInput","pairs","responsePromiseAMM","responsePromiseOrderBook","getOrderBook","responseAMM","responseOrderBook","secret_order_books","secret_order_book","getData","getPrice","asset_infos","contract_address","getTokenSymbol","displaySymbolPair","pair","token1Address","native_token","denom","token2Address","Modal","show","onHide","Header","closeButton","Title","Body","DropdownButton","id","title","Dropdown","Item","disabled","otherTokenData","getCurrentPrice","onChange","e","target","Error","send","recipient","msg","btoa","create_limit_order","getCodeHashByContractAddr","hash","new_secret_order_book_instanciate","amm_pair_hash","Footer","SSCRT_CONTRACT_ADDRESS","App","setClient","setTokensData","remountMyLimitOrdersCount","setRemountMyLimitOrdersCount","setupKeplr","axios","get","tokens","className","ViewKeyButton","CreateNewLimitOrder","MyLimitOrders","CHAIN_ID","sleep","ms","accept","setTimeout","window","keplr","getOfflineSigner","getEnigmaUtils","experimentalSuggestChain","chainId","chainName","rpc","rest","bip44","coinType","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","features","enable","keplrOfflineSigner","getAccounts","accounts","SigningCosmWasmClient","gas","exec","getAccount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c2a42f7.chunk.js","sourcesContent":["const { fromUtf8 } = require(\"@iov/encoding\");\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default async (client, tokenAddress) => {\n    let handleMsg = { create_viewing_key: {entropy: \"1321313123\"} };\n    const response = await client.execute(tokenAddress, handleMsg);\n    const apiKey = JSON.parse(fromUtf8(response.data))\n    if (apiKey.create_viewing_key) {\n      return apiKey.create_viewing_key.key\n    } else if (apiKey.viewing_key) {\n      return apiKey.viewing_key.key\n    }\n  }","import getViewKey from \"../requests/getViewKey\";\nimport React, {useState,useEffect} from 'react';\nimport {Spinner, Button} from \"react-bootstrap\"\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    client,\n    viewKey,\n    setViewKey\n}) => {\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        if (client.ready && !viewKey.ready) {\n          const viewKeys = localStorage.getItem(\"vk\");\n          if (viewKeys && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS] && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]) {\n            setViewKey({\n              ready: true,\n              value: JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]\n            })\n          } else {\n            setViewKey({\n              ready: true,\n              value: null\n            })\n          }\n        }\n      }, [client, setViewKey, viewKey.ready])\n      \n    if (viewKey.ready && !viewKey.value) {\n        return (\n            <Button variant=\"primary\" onClick={async() => {\n                setLoading(true)\n                try {\n                    const response = await getViewKey(client.execute, ORDERS_FACTORY_ADDRESS)\n                    localStorage.setItem(\"vk\",JSON.stringify({[ORDERS_FACTORY_ADDRESS]: {[client.accountData.address]: response}}))\n                    setViewKey({\n                      ready: true,\n                      value: response\n                    })\n                } catch {}\n                setLoading(false)\n              }}>\n                  {\n                    loading ? <Spinner animation=\"border\" /> : \"Create View Key\"\n                  }\n            </Button>\n        )\n    } else {\n        return null\n    }\n}\n","import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner, Modal, DropdownButton, Dropdown, Table} from 'react-bootstrap'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    tokensData,\n    client,\n    viewKey\n}: MyLimitOrdersProps) => {\n    const [myLimitOrders, setMyLimitOrders] = useState<any>(null)\n\n    useEffect(() => {\n        async function init() {\n            setMyLimitOrders(await client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n                user_secret_order_books: {\n                    address: client.accountData.address,\n                    viewing_key: viewKey\n                }\n              }))\n          }\n        init()\n    }, [])\n\n    return (\n        <Table striped bordered hover>\n            <thead>\n                <tr>\n                    <th>Creation Date</th>\n                    <th>Pair</th>\n                    <th>Status</th>\n                    <th>Limit Order</th>\n                    <th>Current Price</th>\n                    <th>Withdraw</th>\n                </tr>\n            </thead>\n            <tbody>\n            {!myLimitOrders && <Spinner animation=\"border\"/>}\n            {\n                myLimitOrders && myLimitOrders.user_secret_order_books.user_secret_order_book &&\n                    myLimitOrders.user_secret_order_books.user_secret_order_book.map((orderBookAddress: string) => \n                        <MyLimitOrder \n                            orderBookAddress={orderBookAddress}\n                            tokensData={tokensData}\n                            client={client}\n                            viewKey={viewKey}\n                            myLimitOrders={myLimitOrders}\n                            setMyLimitOrders={setMyLimitOrders}\n                        />)\n            }\n            </tbody>\n        </Table>\n    )\n}\n\n\nconst MyLimitOrder = ({\n    orderBookAddress,\n    tokensData,\n    client,\n    viewKey,\n    myLimitOrders,\n    setMyLimitOrders\n}: any) => {\n    const [limitOrderData, setLimitOrderData] = useState<any>(null)\n    const [orderBookTokensData, setOrderBookTokensData] = useState<any>(null)\n    const [ammPriceData, setAmmPriceData] = useState<any>(null)\n\n    useEffect(() => {\n        async function init() {\n            const limitOrderPromise = client.execute.queryContractSmart(orderBookAddress, { \n                get_limit_order: {\n                    user_address: client.accountData.address,\n                    user_viewkey: viewKey\n                }\n              })\n\n            const orderBookTokenDataPromise = client.execute.queryContractSmart(orderBookAddress, { \n                order_book_pair_info: {}\n              })\n\n            const [limitOrder, orderBookTokenData] = await Promise.all([limitOrderPromise, orderBookTokenDataPromise]);\n\n            setLimitOrderData(limitOrder)\n            setOrderBookTokensData(orderBookTokenData)\n\n            setAmmPriceData(await getAmmPrice(limitOrder.is_bid ? 0 : 1, orderBookTokenData))\n\n            setInterval(async () => {\n                setLimitOrderData(await client.execute.queryContractSmart(orderBookAddress, { \n                    get_limit_order: {\n                        user_address: client.accountData.address,\n                        user_viewkey: viewKey\n                    }\n                  }));\n                setAmmPriceData(await getAmmPrice(limitOrder.is_bid ? 0 : 1, orderBookTokenData))\n            },6000)\n          }\n        init()\n    }, [])\n\n\n    const getAmmPrice = async (assetIndex: number, orderBookTokenData: any) => {\n        return client.execute.queryContractSmart(orderBookTokenData.amm_pair_address, { \n            simulation: {\n                offer_asset: {\n                    info: {\n                        token: {\n                            ...orderBookTokenData.assets_info[assetIndex].token,\n                            viewing_key: \"\"\n                        }\n                    },\n                    amount: \"\" + Math.pow(10, tokensData.find((data: any) => data.dst_address === orderBookTokenData.assets_info[assetIndex].token.contract_addr).decimals)\n                }\n            }\n          })\n    }\n\n    const displayBalance = (index: number) => {\n        const tokenData = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[index].token.contract_addr);\n        return Math.round(limitOrderData.balances[index]/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000 + \" \" + tokenData.display_props.symbol\n    }\n\n    const displayPrice = (type: string) => {\n        const token1Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n        const token2Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n        if (limitOrderData.is_bid) {\n            if (type === \"order\") {\n                return Math.round(limitOrderData.price/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 + \" \" + token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol \n            } else if (type === \"amm\") {\n                return Math.round(ammPriceData.return_amount/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 + \" \" + token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol \n            }\n        } else {\n            if (type === \"order\") {\n                return Math.round(limitOrderData.price/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000 + \" \" + token1Data.display_props.symbol + \" per \" + token2Data.display_props.symbol \n            } else if (type === \"amm\") {\n                return Math.round(ammPriceData.return_amount/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000 + \" \" + token1Data.display_props.symbol + \" per \" + token2Data.display_props.symbol \n            }\n        }\n    }\n\n    const pairDisplay = () => {\n        const token1Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n        const token2Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n\n        return token1Data.display_props.symbol + \" / \" + token2Data.display_props.symbol \n    }\n\n    const displayDescription = () => {\n        let buying = \"Buying \"\n        let selling = \", selling \"\n        if (limitOrderData.is_bid) {\n            const tokenDataBuy = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n            const tokenDataSell = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n            buying = buying + Math.round(limitOrderData.price/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 * Math.round(limitOrderData.order_token_init_quant/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000 + \" \" + tokenDataBuy.display_props.symbol\n            selling= selling + Math.round(limitOrderData.order_token_init_quant/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000 + \" \" + tokenDataSell.display_props.symbol\n        }\n\n        return buying + selling\n    }\n\n    const rowStyle = limitOrderData ? {\n        backgroundColor: limitOrderData.status === \"Filled\" ? \"#Cfffbc\" : \"#Fff4ad\"\n    } : undefined\n    \n    return (\n        <tr key={orderBookAddress} style={rowStyle}>\n            {limitOrderData && <td>{new Date(limitOrderData.timestamp*1000).toLocaleString()}</td>}\n            {limitOrderData && orderBookTokensData && <td>{pairDisplay()}</td>}\n            {limitOrderData && <td>{limitOrderData.status}</td>}\n            {limitOrderData && orderBookTokensData && \n                <div>\n                    {displayPrice(\"order\")} <br/><br/>\n                    {displayDescription()}\n                </div>}\n            {limitOrderData && ammPriceData && <td>{displayPrice(\"amm\")}</td>}\n            {limitOrderData && <td>{<Button onClick={ async () => {\n                try{\n                    await client.execute.execute(orderBookAddress, { \n                        withdraw_limit_order: {}\n                    })\n                    let update = {...myLimitOrders}\n                    let arr = update.user_secret_order_books.user_secret_order_book.filter((address: string) => address !== orderBookAddress)\n                    update.user_secret_order_books.user_secret_order_book = arr\n                    setMyLimitOrders(update)\n                } catch (e) {\n                    alert(\"error on widthdraw: \" + e)\n                }\n            }}>\n                Widthdraw <br/>\n                {limitOrderData && orderBookTokensData && displayBalance(0) + \"  and  \" + displayBalance(1)}\n            </Button>}</td>}\n        </tr>\n    )\n}\n\ntype MyLimitOrdersProps = {\n    ORDERS_FACTORY_ADDRESS: string,\n    client: any,\n    tokensData: any,\n    viewKey: string | null\n}\n","import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner, Modal, DropdownButton, Dropdown, Form} from 'react-bootstrap'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    AMM_FACTORY_ADDRESS,\n    ORDERS_FACTORY_ADDRESS,\n    tokensData,\n    client,\n    viewKey,\n    remountMyLimitOrders\n}: CreateNewLimitOrderProps) => {\n    const [showCreateLimitOrderModal, setShowCreateLimitOrderModal] = useState(false);\n    const [ammFactoryPairs, setAmmFactoryPairs] = useState<any>(null);\n    const [selectedAmmFactoryPairIndex, setSelectedAmmFactoryPairIndex] = useState<any>(null)\n\n    const [createLimitOrderLoading, setCreateLimitOrderLoading] = useState<boolean>(false);\n    const [selectedAmmPriceLoading, setSelectedAmmPairPriceLoading] = useState<boolean>(false);\n    const [selectedAmmPairPrice, setSelectedAmmPairPrice] = useState<any>(null);\n    const [orderBookPair, setOrderBookPair] = useState<any>({\n        isInstanciated: null,\n        data: null\n    })\n    const [limitOrderIsBidInput, setLimitOrderIsBidInput] = useState<boolean>(true);\n    const [limitOrderAmountInput, setLimitOrderAmountInput] = useState<any>(null);\n    const [limitOrderPriceInput, setLimitOrderPriceInput] = useState<any>(null);\n\n    useEffect(() => {\n        async function init() {\n            setAmmFactoryPairs(await client.execute.queryContractSmart(AMM_FACTORY_ADDRESS, { \n                pairs: {}\n              }));\n          }\n        init()\n    }, [])\n\n    useEffect(() => {\n        async function getData() {\n            if (selectedAmmFactoryPairIndex !== null) {\n                try {\n                    const responsePromiseAMM = getAmmPrice(0);\n                    const responsePromiseOrderBook = getOrderBook();\n    \n                    const [responseAMM, responseOrderBook] = await Promise.all([responsePromiseAMM,responsePromiseOrderBook]);\n    \n                    setSelectedAmmPairPrice(responseAMM)\n                    setSelectedAmmPairPriceLoading(false)\n                    setOrderBookPair({\n                        isInstanciated: responseOrderBook.secret_order_books.secret_order_book ? true : false,\n                        data: responseOrderBook.secret_order_books.secret_order_book\n                    })\n                } catch(e){alert(e)}\n            }\n        }\n        getData()\n    }, [selectedAmmFactoryPairIndex])\n\n    useEffect(() => {\n        if(selectedAmmFactoryPairIndex !== null) {\n            async function getPrice() {\n                try {\n                    let price = null;\n                    if(limitOrderIsBidInput === true) {\n                        price = await getAmmPrice(0)\n                    } else {\n                        price = await getAmmPrice(1)\n                    }\n                    setSelectedAmmPairPriceLoading(false)\n                    setSelectedAmmPairPrice(price)\n                } catch(e) {\n                    alert(e)\n                }\n            }\n            getPrice()\n        }\n    },[selectedAmmFactoryPairIndex, limitOrderIsBidInput])\n\n    const getAmmPrice = async (assetIndex: number) => {\n        return client.execute.queryContractSmart(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr, { \n            simulation: {\n                offer_asset: {\n                    info: {\n                        ...ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[assetIndex]\n                    },\n                    amount: \"\" + Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[assetIndex].token.contract_addr).decimals)\n                }\n            }\n          })\n    }\n\n    const getOrderBook = async () => {\n        return client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n            secret_order_books: {\n                contract_address: ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr\n            }\n          })\n    }\n\n    const getTokenSymbol = (address: string) => {\n        const tokenData = tokensData.find((data: any) => data.dst_address === address);\n        return (tokenData ? tokenData.display_props.symbol : address)\n    } \n\n    const displaySymbolPair = (pair: any) => {\n        const token1Address = pair.asset_infos[0].token ? pair.asset_infos[0].token.contract_addr : pair.asset_infos[0].native_token.denom;\n        const token1Data = tokensData.find((data: any) => data.dst_address === token1Address);\n        const token2Address = pair.asset_infos[1].token ? pair.asset_infos[1].token.contract_addr : pair.asset_infos[1].native_token.denom;\n        const token2Data = tokensData.find((data: any) => data.dst_address === token2Address);\n        \n        if (limitOrderIsBidInput) {\n            return (token1Data ? token1Data.display_props.symbol : token1Address) + \" / \" + (token2Data ? token2Data.display_props.symbol : token2Address)\n        } else {\n            return (token2Data ? token2Data.display_props.symbol : token2Address) + \" / \" + (token1Data ? token1Data.display_props.symbol : token1Address)\n        }\n        \n    }\n\n    const getCurrentPrice = () => {\n        if(selectedAmmPairPrice) {\n            const tokenData = tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 1 : 0].token.contract_addr)\n            const otherTokenData = tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 0 : 1].token.contract_addr)\n            return selectedAmmPairPrice.return_amount / Math.pow(10, tokenData.decimals) + \" \" + tokenData.display_props.symbol + \" per \" + otherTokenData.display_props.symbol\n        }\n                                    \n    }\n\n    return (\n        <div>\n            <Button onClick={() => setShowCreateLimitOrderModal(true)}>Create New Limit Order</Button>\n            <Modal show={showCreateLimitOrderModal} onHide={() => setShowCreateLimitOrderModal(false)}>\n                <Modal.Header closeButton>\n                <Modal.Title>Create Limit Order</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        ammFactoryPairs && \n                            <DropdownButton id=\"dropdown-basic-button\" title=\"Dropdown button\">\n                                {\n                                    ammFactoryPairs!.pairs.map((pair: any, index: number) =>\n                                        <Dropdown.Item key={pair.contract_addr} onClick={() => {\n                                            setSelectedAmmPairPriceLoading(true)\n                                            setSelectedAmmFactoryPairIndex(index)\n                                        }}>\n                                            {\n                                                displaySymbolPair(pair)\n                                            }\n                                        </Dropdown.Item>\n                                    )\n                                }   \n                            </DropdownButton>\n                    }\n                    {\n                        selectedAmmFactoryPairIndex !== null &&\n                        <div>\n                            { displaySymbolPair(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex]) }\n                            <br/>\n                            {\n                                <Button disabled={selectedAmmPriceLoading} onClick={() => {\n                                    setSelectedAmmPairPriceLoading(true)\n                                    setLimitOrderIsBidInput(!limitOrderIsBidInput)\n                                }}> Switch </Button>\n                            }\n                            <br/>\n                            { selectedAmmPriceLoading && <Spinner animation=\"border\"/> }\n                            { !selectedAmmPriceLoading && selectedAmmPairPrice && getCurrentPrice()}\n                            <br/>\n                            <br/>\n                            <label>{\n                                limitOrderIsBidInput ?\n                                `Price of Limit Order (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr) + \")\" \n                                :\n                                `Price of Limit Order (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr) + \")\"\n                            }</label><br/>\n                            <input onChange={(e) => setLimitOrderPriceInput(e.target.value)}></input><br/>\n                            <label>{\n                                limitOrderIsBidInput ?\n                                `Amount to swap (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr) + \")\" \n                                :\n                                `Amount to swap (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr) + \")\"\n                            }\n                            </label><br/>\n                            <input onChange={(e) => setLimitOrderAmountInput(e.target.value)}></input><br/>\n                            <br/>\n                            { orderBookPair.isInstanciated === null && <Spinner animation=\"border\"/> }\n                            { orderBookPair.isInstanciated === true && \n                                <Button onClick={async() => {\n                                        try {\n                                            if(\n                                                limitOrderAmountInput === null || limitOrderAmountInput === \"\" || limitOrderAmountInput === \"0\" ||\n                                                limitOrderPriceInput === null || limitOrderPriceInput === \"\" || limitOrderPriceInput === \"0\") {\n                                                throw Error(\"Bad Inputs\");\n                                            }   \n                                            // loading\n                                            setCreateLimitOrderLoading(true)\n                                            await client.execute.execute(\n                                                ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 0 : 1].token.contract_addr,\n                                                { \n                                                    send: {\n                                                        recipient: orderBookPair.data.contract_addr,\n                                                        amount: \"\" + limitOrderAmountInput*Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 0 : 1].token.contract_addr).decimals),\n                                                        msg: btoa(JSON.stringify({\n                                                            create_limit_order: {\n                                                                is_bid: limitOrderIsBidInput,\n                                                                price: \"\" + limitOrderPriceInput*Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 1 : 0].token.contract_addr).decimals)\n                                                            }\n                                                        }))\n                                                    } \n                                                }\n                                            )\n                                            setCreateLimitOrderLoading(false)\n                                            // sair deste terminal e fazer refresh do outro\n                                            setShowCreateLimitOrderModal(false)\n                                            remountMyLimitOrders()\n                                        } catch (e) {\n                                            alert(e)\n                                            setCreateLimitOrderLoading(false)\n                                        }\n                                    }\n                                }> \n                                    {\n                                        createLimitOrderLoading ? <Spinner animation=\"border\"/> : \"Create Create Limit Order\"\n                                    }\n                                </Button>\n                            }\n                            { orderBookPair.isInstanciated === false && \n                                <Button onClick={async() => {\n                                    try {\n                                        setOrderBookPair({\n                                            isInstanciated: null,\n                                            data: null\n                                        });\n                                        const hash = await client.execute.getCodeHashByContractAddr(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr)\n                                        await client.execute.execute(ORDERS_FACTORY_ADDRESS,  { \n                                            new_secret_order_book_instanciate: {\n                                                amm_pair_address: ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr,\n                                                amm_pair_hash: hash\n                                            } \n                                        })\n                                        const responseOrderBook = await getOrderBook();\n                                        setOrderBookPair({\n                                            isInstanciated: responseOrderBook.secret_order_books.secret_order_book ? true : false,\n                                            data: responseOrderBook.secret_order_books.secret_order_book\n                                        })\n                                    } catch (e) {\n                                        alert(e);\n                                        setOrderBookPair({\n                                            isInstanciated: false,\n                                            data: null\n                                        })\n                                    }\n                                }}> \n                                    Instanciate Order Book Pair\n                                </Button>\n                            }\n                        </div>\n                    }\n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => setShowCreateLimitOrderModal(false)}>\n                    Close\n                </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n        )\n}\n\ntype CreateNewLimitOrderProps = {\n    AMM_FACTORY_ADDRESS: string,\n    ORDERS_FACTORY_ADDRESS: string,\n    client: any,\n    tokensData: any,\n    viewKey: string | null,\n    remountMyLimitOrders: any\n}\n\n","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SigningCosmWasmClient } from 'secretjs';\nimport ViewKeyButton from \"./Containers/ViewKeyButton\"\nimport MyLimitOrders from \"./Containers/MyLimitOrders\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CreateNewLimitOrder from \"./Containers/CreateNewLimitOrder\";\nimport axios from 'axios';\n\nconst AMM_FACTORY_ADDRESS=\"secret1ypfxpp4ev2sd9vj9ygmsmfxul25xt9cfadrxxy\"\nconst ORDERS_FACTORY_ADDRESS=\"secret1apty7a9dp7rd3tzzznruqxlcgqc0g26myj7mde\" \nconst SSCRT_CONTRACT_ADDRESS=\"secret1s7c6xp9wltthk5r6mmavql4xld5me3g37guhsx\"\n\nfunction App() {\n  const [client, setClient] = useState({\n    ready: false,\n    execute: null,\n    accountData: {\n      address: \"\"\n    }\n  });\n\n  const [viewKey, setViewKey] = useState({\n    ready: false,\n    value: null\n  });\n\n  const [tokensData, setTokensData] = useState<any>(null);\n  const [remountMyLimitOrdersCount, setRemountMyLimitOrdersCount] = useState<number>(0);\n\n  useEffect(() => {\n    async function init() {\n      setupKeplr(setClient);\n      try {\n        const response = await axios.get(\"https://scrt-bridge-api.azurewebsites.net/tokens/?page=0&size=1000\");\n        setTokensData([...response.data.tokens,{\n          dst_address: SSCRT_CONTRACT_ADDRESS,\n          decimals: 6,\n          display_props: {\n            symbol: \"sSCRT\"\n          }\n        },{\n          dst_address: \"secret1ha79qdkjsq7nyy8hagsggfq6zzlwshfmgfv3k0\",\n          decimals: 18,\n          display_props: {\n            symbol: \"sTST\"\n          }\n        },\n      ]);\n      } catch (e) {\n        \n        setTokensData([{\n          dst_address: \"secret1ttg5cn3mv5n9qv8r53stt6cjx8qft8ut9d66ed\",\n          decimals: 18,\n          display_props: {\n            symbol: \"sETH\"\n          }\n        },{\n          dst_address: SSCRT_CONTRACT_ADDRESS,\n          decimals: 6,\n          display_props: {\n            symbol: \"sSCRT\"\n          }\n        },{\n          dst_address: \"secret1ha79qdkjsq7nyy8hagsggfq6zzlwshfmgfv3k0\",\n          decimals: 18,\n          display_props: {\n            symbol: \"sTST\"\n          }\n        },\n      ]);\n      }\n      \n    }\n    init();\n  }, [])\n\n  const remountMyLimitOrders = () => setRemountMyLimitOrdersCount(remountMyLimitOrdersCount+1)\n\n  if(!client.ready) {\n    return <div>Loading...</div>\n  } else {\n    return (\n      <div className=\"App\">\n          <ViewKeyButton \n            ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n            client={client}\n            viewKey={viewKey}\n            setViewKey={setViewKey}\n          />\n          {\n            viewKey.value &&  \n              <div>\n                  <CreateNewLimitOrder \n                    ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                    AMM_FACTORY_ADDRESS={AMM_FACTORY_ADDRESS}\n                    tokensData={tokensData}\n                    client={client}\n                    viewKey={viewKey.value}\n                    remountMyLimitOrders={remountMyLimitOrders}\n                  /> \n                  <MyLimitOrders \n                    key={remountMyLimitOrdersCount} // Used to force remount this component\n                    ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                    tokensData={tokensData}\n                    client={client}\n                    viewKey={viewKey.value}\n                  />\n              </div>\n          }\n          \n          {\n            /*\n              <PairsAvailable \n                AMM_FACTORY_ADDRESS={AMM_FACTORY_ADDRESS}\n                ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                client={client}\n                viewKey={viewKey.value}\n              />\n            */\n          }\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst setupKeplr = async (setClient: any) => {\n  // Define sleep\n  const CHAIN_ID = \"holodeck-2\";\n  \n  const sleep = (ms: number) => new Promise((accept) => setTimeout(accept, ms));\n\n  // Wait for Keplr to be injected to the page\n  while (\n    !window.keplr &&\n    !window.getOfflineSigner &&\n    !window.getEnigmaUtils\n  ) {\n    await sleep(10);\n  }\n\n  // Use a custom chain with Keplr.\n  // On mainnet we don't need this (`experimentalSuggestChain`).\n  // This works well with `enigmampc/secret-network-sw-dev`:\n  //     - https://hub.docker.com/r/enigmampc/secret-network-sw-dev\n  //     - Run a local chain: `docker run -it --rm -p 26657:26657 -p 26656:26656 -p 1337:1337 -v $(shell pwd):/root/code --name secretdev enigmampc/secret-network-sw-dev`\n  //     - `alias secretcli='docker exec -it secretdev secretcli'`\n  //     - Store a contract: `docker exec -it secretdev secretcli tx compute store /root/code/contract.wasm.gz --from a --gas 10000000 -b block -y`\n  // On holodeck, set:\n  //     1. CHAIN_ID = \"holodeck-2\"\n  //     2. rpc = \"ttp://bootstrap.secrettestnet.io:26657\"\n  //     3. rest = \"https://bootstrap.secrettestnet.io\"\n  //     4. chainName = Whatever you like\n  // For more examples, go to: https://github.com/chainapsis/keplr-example/blob/master/src/main.js\n  await window.keplr.experimentalSuggestChain({\n    chainId: CHAIN_ID,\n    chainName: \"Local Secret Chain\",\n    rpc: \"http://bootstrap.secrettestnet.io:26657\",\n    rest: \"https://bootstrap.secrettestnet.io\",\n    bip44: {\n      coinType: 529,\n    },\n    coinType: 529,\n    stakeCurrency: {\n      coinDenom: \"SCRT\",\n      coinMinimalDenom: \"uscrt\",\n      coinDecimals: 6,\n    },\n    bech32Config: {\n      bech32PrefixAccAddr: \"secret\",\n      bech32PrefixAccPub: \"secretpub\",\n      bech32PrefixValAddr: \"secretvaloper\",\n      bech32PrefixValPub: \"secretvaloperpub\",\n      bech32PrefixConsAddr: \"secretvalcons\",\n      bech32PrefixConsPub: \"secretvalconspub\",\n    },\n    currencies: [\n      {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n    ],\n    gasPriceStep: {\n      low: 0.3,\n      average: 0.45,\n      high: 0.6,\n    },\n    features: [\"secretwasm\"],\n  });\n\n  // Enable Keplr.\n  // This pops-up a window for the user to allow keplr access to the webpage.\n  await window.keplr.enable(CHAIN_ID);\n\n  // Setup SecrtJS with Keplr's OfflineSigner\n  // This pops-up a window for the user to sign on each tx we sent\n  const keplrOfflineSigner = window.getOfflineSigner(CHAIN_ID);\n  const accounts = await keplrOfflineSigner.getAccounts();\n\n  const execute = await new SigningCosmWasmClient(\n    \"https://bootstrap.secrettestnet.io\", // holodeck - https://bootstrap.secrettestnet.io; mainnet - user your LCD/REST provider\n    accounts[0].address,\n    window.getOfflineSigner(CHAIN_ID),\n    window.getEnigmaUtils(CHAIN_ID),\n    {\n      // 300k - Max gas units we're willing to use for init\n      init: {\n        amount: [{ amount: \"500000\", denom: \"uscrt\" }],\n        gas: \"500000\",\n      },\n      // 300k - Max gas units we're willing to use for exec\n      exec: {\n        amount: [{ amount: \"500000\", denom: \"uscrt\" }],\n        gas: \"500000\",\n      },\n    }\n  )\n\n  const accountData = await execute.getAccount(accounts[0].address);\n  \n  setClient({\n    ready: true,\n    execute,\n    accountData\n  })\n}\n\ndeclare global {\n  interface Window { keplr: any, getOfflineSigner:any, getEnigmaUtils:any }\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}