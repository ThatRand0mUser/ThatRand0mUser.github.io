{"version":3,"sources":["context/ClientContext.tsx","constants.tsx","containers/KeplrSetup.tsx","api/getBalance.tsx","context/ViewKeyContext.tsx","context/BalancesContext.tsx","utils/formatNumber.ts","utils/notifications.ts","api/convertTosSCRT.tsx","containers/NavBar.tsx","utils/entropy.ts","api/createViewKey.tsx","containers/CreateViewkey.tsx","api/getPaginatedRounds.tsx","api/getPaginatedUserBets.tsx","api/getTierConfigs.tsx","api/getUserBets.tsx","context/CurrentRoundsStateContext.tsx","api/getRounds.tsx","api/withdrawl.tsx","api/bet.tsx","containers/RoundComponent.tsx","containers/Bets.tsx","containers/Pools.tsx","containers/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ClientContext","createContext","ClientDispatchContext","props","useState","ClientState","setClientState","Provider","value","children","clientDispatchState","useContext","useEffect","setupKeplr","setClient","a","sleep","ms","Promise","accept","setTimeout","window","keplr","getOfflineSigner","getEnigmaUtils","experimentalSuggestChain","chainId","constants","chainName","rpc","rest","bip44","coinType","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","features","enable","keplrOfflineSigner","getAccounts","accounts","SigningCosmWasmClient","address","init","amount","denom","gas","exec","execute","getAccount","accountData","balance","client","contractAddress","getSecret20ViewingKey","response","queryContractSmart","key","balanceResponse","ViewKeyContext","ViewKeyDispatchContext","ViewKeyState","setViewKeyState","BalancesContext","BalancesDispatchContext","BalancesState","setBalancesState","number","Math","round","errorNotification","error","store","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","successNotification","fromUtf8","require","handleMsg","deposit","undefined","JSON","parse","data","viewkey","viewkeyDispatchState","balances","balancesDispatch","loadingConvertTestnetSSCRT","setLoadingConvertTestnetSSCRT","removeVKModalShow","setRemoveVKModalShow","getSSCRTBalance","localStorage","getItem","getBalance","native","parseInt","sSCRT","Fragment","className","style","color","display","padding","borderRadius","slice","length","marginRight","onClick","border","verticalAlign","formatNumber","fontSize","open","marginLeft","suggestToken","margin","justifyContent","disabled","convertTosSCRT","RemoveVKModal","Modal","centered","show","onHide","background","data-dismiss","aria-label","aria-hidden","htmlFor","textAlign","id","placeholder","data-bs-dismiss","removeItem","result","characters","charactersLength","i","charAt","floor","random","create_viewing_key","entropy","createViewKeyLoading","setCreateViewKeyLoading","width","marginTop","createViewKey","viewing_key","setItem","page","page_size","queryMsg","get_paginated_rounds","tier1","tier2","tier3","atob","get_paginated_user_bets","user_address","includes","clear","user_bets","bet_rounds","get_tier_configs","keys","get_user_bets","CurrentRoundsStateContext","CurrentRoundsStateDispatchContext","CurrentRoundsState","setCurrentRoundsState","tier1_rounds","tier2_rounds","tier3_rounds","get_rounds","tier","withdrawl","tokenAddress","msg","btoa","send","recipient","poolNumber","pollConfig","currentRoundsUserBets","triggerGetPaginatedUserBets","getCurrentRoundsStateTrigger","buttonLoading","setButtonLoading","enterPoolModal","setEnterPoolModal","marginBottom","round_number","round_end_timestamp","round_end_pool_size","lucky_number","Date","toLocaleString","pool_size","users_count","min_entries","winner_users_count","find","bet","claimed_reward","pool","entry_fee","configs","EnterPoolModal","setNumber","betLoading","setBetLoading","Array","from","max_rand_number","map","currentRoundsState","pollConfigs","paginatedUserBets","paginationValues","setPaginationsValues","roundViewer","setRoundViewer","loading","searchState","setSearchState","triggerGetRound","pollNumber","push","getRounds","roundState","rounds","tier1_configs","tier2_configs","tier3_configs","handlePageChange","scope","timestamp","toLocaleDateString","toLocaleTimeString","user_bets_total_count","ceil","RoundComponent","Form","Row","Group","as","Col","Label","Control","defaultValue","textAlignLast","onChange","e","target","min","alignItems","height","OverlayTrigger","placement","delay","hide","overlay","Tooltip","triggerer_fee","currentRoundsStateDispatch","setPollConfigs","setCurrentRoundsUserBets","setPaginatedUserBets","getTierConfigsTrigger","setInterval","getSeconds","getTierConfigs","tierConfigs","triggerCurrentRoundUserBets","getPaginatedRounds","paginatedRounds","getCurrentRoundUserBets","getUserBets","getCurrentRoundUserBetsResponse","getPaginatedUserBets","Pools","Bets","App","minHeight","KeplrSetup","NavBar","CreateViewkey","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7ba4b68.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\nimport { SigningCosmWasmClient } from \"secretjs\";\n\nexport const ClientContext = createContext<IClientState | null>(null);\nexport const ClientDispatchContext = createContext<Function>(() => null);\n\nexport default (props: any) => {\n    const [ClientState, setClientState] = useState<IClientState | null>(null) \n\n    return (\n        <ClientContext.Provider value={ClientState}>\n             <ClientDispatchContext.Provider value={setClientState}>\n                {props.children}\n             </ClientDispatchContext.Provider>\n        </ClientContext.Provider>\n    );\n  }\n\n\n  export interface IClientState {\n    execute: SigningCosmWasmClient,\n    accountData: {\n      address: string,\n      balance: string\n    }\n  }","export default {\n    CHAIN_ID: \"holodeck-2\",\n    SSCRT_CONTRACT_ADDRESS: \"secret1s7c6xp9wltthk5r6mmavql4xld5me3g37guhsx\",\n    SEFI_CONTRACT_ADDRESS: \"\",\n    LUCKY_NUMBER_CONTRACT_ADDRESS: \"secret1mu7fsh6wclr5tvr8p894qqa9q7jj9an4l6fuk4\"\n}","import { Dispatch, useContext, useEffect } from \"react\";\nimport { SigningCosmWasmClient } from \"secretjs\";\nimport constants from \"../constants\";\nimport {ClientDispatchContext} from \"../context/ClientContext\"\n\nexport default () => {\n    const clientDispatchState = useContext(ClientDispatchContext);\n\n    useEffect(() => {\n        setupKeplr(clientDispatchState);\n    }, [])\n\n    return null\n}\n\nexport \n\n \nconst setupKeplr = async (setClient: any) => {\n    // Define sleep \n    const sleep = (ms: number) => new Promise((accept) => setTimeout(accept, ms));\n  \n    // Wait for Keplr to be injected to the page\n    while (\n      !window.keplr &&\n      !window.getOfflineSigner &&\n      !window.getEnigmaUtils\n    ) {\n      await sleep(10);\n    }\n  \n    // Use a custom chain with Keplr.\n    // On mainnet we don't need this (`experimentalSuggestChain`).\n    // This works well with `enigmampc/secret-network-sw-dev`:\n    //     - https://hub.docker.com/r/enigmampc/secret-network-sw-dev\n    //     - Run a local chain: `docker run -it --rm -p 26657:26657 -p 26656:26656 -p 1337:1337 -v $(shell pwd):/root/code --name secretdev enigmampc/secret-network-sw-dev`\n    //     - `alias secretcli='docker exec -it secretdev secretcli'`\n    //     - Store a contract: `docker exec -it secretdev secretcli tx compute store /root/code/contract.wasm.gz --from a --gas 10000000 -b block -y`\n    // On holodeck, set:\n    //     1. CHAIN_ID = \"holodeck-2\"\n    //     2. rpc = \"ttp://bootstrap.secrettestnet.io:26657\"\n    //     3. rest = \"https://bootstrap.secrettestnet.io\"\n    //     4. chainName = Whatever you like\n    // For more examples, go to: https://github.com/chainapsis/keplr-example/blob/master/src/main.js\n    await window.keplr.experimentalSuggestChain({\n      chainId: constants.CHAIN_ID, \n      chainName: \"Local Secret Chain\",\n      rpc: \"http://bootstrap.secrettestnet.io:26657\",\n      rest: \"https://bootstrap.secrettestnet.io\",\n      bip44: {\n        coinType: 529,\n      },\n      coinType: 529,\n      stakeCurrency: {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n      bech32Config: {\n        bech32PrefixAccAddr: \"secret\",\n        bech32PrefixAccPub: \"secretpub\",\n        bech32PrefixValAddr: \"secretvaloper\",\n        bech32PrefixValPub: \"secretvaloperpub\",\n        bech32PrefixConsAddr: \"secretvalcons\",\n        bech32PrefixConsPub: \"secretvalconspub\",\n      },\n      currencies: [\n        {\n          coinDenom: \"SCRT\",\n          coinMinimalDenom: \"uscrt\",\n          coinDecimals: 6,\n        },\n      ],\n      feeCurrencies: [\n        {\n          coinDenom: \"SCRT\",\n          coinMinimalDenom: \"uscrt\",\n          coinDecimals: 6,\n        },\n      ],\n      gasPriceStep: {\n        low: 0.3,\n        average: 0.45,\n        high: 0.6,\n      },\n      features: [\"secretwasm\"],\n    });\n  \n    // Enable Keplr.\n    // This pops-up a window for the user to allow keplr access to the webpage.\n    await window.keplr.enable(constants.CHAIN_ID);\n  \n    // Setup SecrtJS with Keplr's OfflineSigner\n    // This pops-up a window for the user to sign on each tx we sent\n    const keplrOfflineSigner = window.getOfflineSigner(constants.CHAIN_ID);\n    const accounts = await keplrOfflineSigner.getAccounts();\n  \n    const execute = await new SigningCosmWasmClient(\n      \"https://bootstrap.secrettestnet.io\", // holodeck - https://bootstrap.secrettestnet.io; mainnet - user your LCD/REST provider\n      accounts[0].address,\n      window.getOfflineSigner(constants.CHAIN_ID),\n      window.getEnigmaUtils(constants.CHAIN_ID),\n      {\n        // 300k - Max gas units we're willing to use for init\n        init: {\n          amount: [{ amount: \"500000\", denom: \"uscrt\" }],\n          gas: \"500000\",\n        },\n        // 300k - Max gas units we're willing to use for exec\n        exec: {\n          amount: [{ amount: \"500000\", denom: \"uscrt\" }],\n          gas: \"500000\",\n        },\n      }\n    )\n  \n    const accountData = await execute.getAccount(accounts[0].address);\n  \n    if (!accountData) return\n  \n    setClient({\n      execute,\n      accountData: {\n        address: accountData.address,\n        balance: accountData.balance[0].amount\n      }\n    })\n  }\n  \n  declare global {\n    interface Window { keplr: any, getOfflineSigner: any, getEnigmaUtils: any }\n  }\n  \n\n  ","import { SigningCosmWasmClient } from \"secretjs\"\nimport constants from \"../constants\"\nimport { IClientState } from \"../context/ClientContext\"\n\nexport default async (client: IClientState, contractAddress: string) => {\n    try {\n        const response = await window.keplr.getSecret20ViewingKey(constants.CHAIN_ID,contractAddress)\n        const balanceResponse = await client.execute.queryContractSmart(contractAddress, {\n            balance: {\n                address: client.accountData.address,\n                key: response\n            }\n        })\n        \n        return balanceResponse.balance.amount\n    } catch (e) {\n        return null\n    }\n}","import React, { useState, createContext } from \"react\";\n\nexport const ViewKeyContext = createContext<string | null>(null);\nexport const ViewKeyDispatchContext = createContext<Function>(() => null);\n\nexport default (props: any) => {\n    const [ViewKeyState, setViewKeyState] = useState<string | null>(null) \n\n    return (\n        <ViewKeyContext.Provider value={ViewKeyState}>\n             <ViewKeyDispatchContext.Provider value={setViewKeyState}>\n                {props.children}\n             </ViewKeyDispatchContext.Provider>\n        </ViewKeyContext.Provider>\n    );\n  }","import React, { useState, createContext } from \"react\";\n\nexport const BalancesContext = createContext<IBalances | null>(null);\nexport const BalancesDispatchContext = createContext<Function>(() => null);\n\nexport default (props: any) => {\n    const [BalancesState, setBalancesState] = useState<IBalances | null>(null) \n\n    return (\n        <BalancesContext.Provider value={BalancesState}>\n             <BalancesDispatchContext.Provider value={setBalancesState}>\n                {props.children}\n             </BalancesDispatchContext.Provider>\n        </BalancesContext.Provider>\n    );\n  }\n\n\n  export interface IBalances {\n    native: number,\n    sSCRT: number | null\n  }","export default (number: number) => Math.round(number * 100) / 100","import { store } from \"react-notifications-component\";\n\nexport const errorNotification = async (error: Error) => {\n        store.addNotification({\n          title: \"Error\",\n          message: error.message,\n          type: \"danger\",\n          insert: \"bottom\",\n          container: \"bottom-left\",\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n          dismiss: {\n            duration: 3000,\n            onScreen: true,\n          },\n        });\n        return null;\n}\n\nexport const successNotification = async (message: string) => {\n\n        store.addNotification({\n          title: \"Success\",\n          message: message,\n          type: \"success\",\n          insert: \"bottom\",\n          container: \"bottom-left\",\n          animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n          animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n          dismiss: {\n            duration: 3000,\n            onScreen: true,\n          },\n        });\n        return null;\n}","import { IClientState } from \"../context/ClientContext\";\nimport entropy from \"../utils/entropy\";\nconst { fromUtf8 } = require(\"@iov/encoding\");\n\nexport default async (client: IClientState, contractAddress: string) => {\n    let handleMsg = { deposit: {} };\n    const response = await client.execute.execute(contractAddress, handleMsg, undefined, [{denom: \"uscrt\", amount: \"10000000\"}]);\n    return JSON.parse(fromUtf8(response.data))\n}","import { Dispatch, useContext, useEffect, useState } from \"react\"\nimport { ClientContext, IClientState } from \"../context/ClientContext\";\nimport { SigningCosmWasmClient } from 'secretjs';\nimport constants from \"../constants\";\nimport getBalance from \"../api/getBalance\";\nimport React from \"react\";\nimport { ViewKeyContext, ViewKeyDispatchContext } from \"../context/ViewKeyContext\";\nimport { BalancesContext, BalancesDispatchContext } from \"../context/BalancesContext\";\nimport formatNumber from \"../utils/formatNumber\";\nimport createViewKey from \"../api/createViewKey\";\nimport { errorNotification } from \"../utils/notifications\";\nimport { Modal } from \"react-bootstrap\";\nimport convertTosSCRT from \"../api/convertTosSCRT\";\n\nexport default () => {\n    const client = useContext(ClientContext);\n    const viewkey = useContext(ViewKeyContext);\n    const viewkeyDispatchState = useContext(ViewKeyDispatchContext);\n    const balances = useContext(BalancesContext);\n    const balancesDispatch = useContext(BalancesDispatchContext);\n    const [loadingConvertTestnetSSCRT, setLoadingConvertTestnetSSCRT] = useState<boolean>(false)\n    //const [sSCRTBalance, setsSCRTBalance] = useState<number | null>(null)\n    const [removeVKModalShow, setRemoveVKModalShow] = useState<boolean>(false)\n\n    useEffect(() => {\n        if (client) {\n            getSSCRTBalance()\n            if (localStorage.getItem(client.accountData.address)) {\n                viewkeyDispatchState(localStorage.getItem(client.accountData.address))\n            }\n        }\n    }, [client])\n\n    const getSSCRTBalance = async () => {\n        if (!client) return null\n        const response = await getBalance(client, constants.SSCRT_CONTRACT_ADDRESS)\n        const accountData = await client.execute.getAccount(client.accountData.address);\n        balancesDispatch({\n            native: parseInt(accountData ? accountData.balance[0].amount : \"0\"),\n            sSCRT: response\n        })\n    }\n\n    const renderViewKey = () => {\n        if (client && viewkey) {\n            return (\n                <div style={{ padding: \"8px 13px\", borderRadius: \"10px\", marginRight: \"10px\" }}\n                    onClick={() => setRemoveVKModalShow(true)}\n                >\n                    <i style={{ color: \"green\" }} className=\"fas fa-key fa-lg\"></i>\n                </div>\n            )\n        } else {\n            return (\n                <div style={{ padding: \"8px 13px\", borderRadius: \"10px\", marginRight: \"10px\" }}>\n                    <i style={{ color: \"red\" }} className=\"fas fa-key fa-lg\"></i>\n                </div>\n            )\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <nav className=\"navbar justify-content-between\" style={{ color: \"white\" }}>\n                <a className=\"navbar-brand\">\n                    LUCKY NUMBER\n                </a>\n                <div className=\"navbar-nav mr-3 ml-3\">\n\n                </div>\n                <div className=\"navbar-nav mr-auto\">\n\n                </div>\n                {\n                    client && balances &&\n                    <React.Fragment>\n                        <div style={{ display: \"flex\", padding: \"8px 13px\", borderRadius: \"10px\" }}>\n                            {client.accountData.address.slice(0, 10) + \"...\" + client.accountData.address.slice(client.accountData.address.length - 5, client.accountData.address.length)}\n                        </div>\n                        {renderViewKey()}\n                        <div style={{ border: \"1px solid white\", padding: \"8px 13px\", borderRadius: \"10px\" }}>\n                            <div>\n                                <span style={{ marginRight: \"10px\", verticalAlign: \"middle\" }}>{\"\" + formatNumber(balances.native / 1000000) + \" SCRT\"} </span>\n                                <i className=\"fas fa-arrows-alt-h\" style={{ fontSize: \"1.5rem\", verticalAlign: \"middle\" }}\n                                    onClick={() => window.open(\"https://wallet.keplr.app/#/secret/secret-secret\", \"_blank\")}></i>\n                                <span style={{ marginLeft: \"10px\", verticalAlign: \"middle\" }}>\n                                    {\n                                        balances.sSCRT ? formatNumber(balances.sSCRT / 1000000) + \" sSCRT\" :\n                                            <span><i style={{ color: \"red\", marginRight: \"5px\" }} className=\"fas fa-key\" onClick={async () => {\n                                                try {\n                                                    await window.keplr.suggestToken(constants.CHAIN_ID, constants.SSCRT_CONTRACT_ADDRESS);\n                                                    const sleep = (ms: number) => new Promise((accept) => setTimeout(accept, ms));\n                                                    await sleep(1000);\n                                                    getSSCRTBalance()\n\n                                                } catch (e) {\n                                                    errorNotification(e)\n                                                }\n                                            }\n                                            }></i> sSCRT</span>\n                                    }\n                                </span>\n                            </div>\n                        </div>\n                        <div style={{\n                            border: \"1px solid white\",\n                            padding: \"4px 7px\",\n                            borderRadius: \"10px\",\n                            margin: \"10px\",\n                            fontSize: \".85rem\"\n                        }}> \n                            <div className=\"row\" style={{justifyContent:\"center\", margin: \"0px\"}}><span>Testnet</span></div>\n                            <div className=\"row\" style={{justifyContent:\"center\", margin: \"0px\"}}>\n                                <div className=\"col\" style={{padding: \"3px\"}}>\n                                    <button className=\"btn btn-warning\" style={{fontSize: \".75rem\"}} onClick={() => window.open(\"https://faucet.secrettestnet.io/\", \"_blank\")}> Get SCRT</button>\n                                </div>\n                                <div className=\"col\"  style={{padding: \"3px\"}}>\n                                    <button className=\"btn btn-warning\" style={{fontSize: \".75rem\"}} \n                                    disabled={loadingConvertTestnetSSCRT}\n                                    onClick={async () => {\n                                        setLoadingConvertTestnetSSCRT(true)\n                                        await convertTosSCRT(client,constants.SSCRT_CONTRACT_ADDRESS)\n                                        await getSSCRTBalance()\n                                        setLoadingConvertTestnetSSCRT(false)\n                                    }\n                                    }> \n                                    {\n                                        loadingConvertTestnetSSCRT ? \n                                        <i className=\"fa fa-spinner fa-spin\"></i>:\n                                        \"Convert to sSCRT\"\n                                    }\n                                    \n                                    </button>\n                                </div>\n                            </div>\n\n                        </div>\n                    </React.Fragment>\n                }\n            </nav>\n            {\n                client &&\n                <RemoveVKModal\n                    client={client}\n                    viewkey={viewkey}\n                    viewkeyDispatchState={viewkeyDispatchState}\n                    removeVKModalShow={removeVKModalShow}\n                    setRemoveVKModalShow={setRemoveVKModalShow}\n                />\n            }\n        </React.Fragment>\n    )\n}\n\nconst RemoveVKModal = ({\n    client,\n    viewkey,\n    viewkeyDispatchState,\n    removeVKModalShow,\n    setRemoveVKModalShow\n}: {\n    client: IClientState,\n    viewkey: string | null,\n    viewkeyDispatchState: Function,\n    removeVKModalShow: boolean,\n    setRemoveVKModalShow: Dispatch<boolean>\n}) => {\n    return (\n        <Modal centered show={removeVKModalShow} onHide={() => setRemoveVKModalShow(false)} >\n            <div style={{ background: \"linear-gradient(180deg, #242525 0%, #000 180%)\", color: \"white\" }}>\n                <div className=\"modal-header\">\n                    <h5 className=\"modal-title\">View Key</h5>\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" style={{ color: \"white\" }} onClick={() => setRemoveVKModalShow(false)}>\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div className=\"modal-body\">\n                    <div className=\"mb-3\">\n                        <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">View Key:</label>\n                        <input style={{ textAlign: \"center\" }} type=\"text\" disabled className=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"VK\" value={viewkey || \"\"} />\n                    </div>\n                </div>\n                <div className=\"modal-footer\">\n                    <button type=\"button\" className=\"btn btn-danger py-2 px-4\" data-bs-dismiss=\"modal\" onClick={() => {\n                        localStorage.removeItem(client.accountData.address)\n                        viewkeyDispatchState(null);\n                        setRemoveVKModalShow(false)\n                    }}>Remove</button>\n                    <button type=\"button\" className=\"btn btn-secondary py-2 px-4\" data-bs-dismiss=\"modal\" onClick={() => setRemoveVKModalShow(false)}>Close</button>\n                </div>\n            </div>\n\n        </Modal>\n    )\n}\n","export default (length: number) => {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}","import { IClientState } from \"../context/ClientContext\";\nimport entropy from \"../utils/entropy\";\nconst { fromUtf8 } = require(\"@iov/encoding\");\n\nexport default async (client: IClientState, contractAddress: string) => {\n    let handleMsg = { create_viewing_key: {entropy: entropy(27)} };\n    const response = await client.execute.execute(contractAddress, handleMsg);\n    return JSON.parse(fromUtf8(response.data))\n   \n\n}","import { useContext, useState } from \"react\";\nimport createViewKey from \"../api/createViewKey\"\nimport constants from \"../constants\"\nimport {ClientContext} from \"../context/ClientContext\";\nimport { ViewKeyContext, ViewKeyDispatchContext } from \"../context/ViewKeyContext\";\nimport {errorNotification, successNotification} from \"../utils/notifications\";\n\nexport default () => {\n    const client = useContext(ClientContext);\n    const viewkey = useContext(ViewKeyContext);\n    const viewkeyDispatchState = useContext(ViewKeyDispatchContext);\n    const [createViewKeyLoading, setCreateViewKeyLoading] = useState<Boolean>(false)\n\n    if (client && !viewkey) {\n        return (\n            <div style={{ width: \"100%\", marginTop: \"50px\" }}>\n                {\n                    client ? \n                    <button \n                        type=\"button\" \n                        className=\"btn btn-light\"\n                        onClick={async() => {\n                            setCreateViewKeyLoading(true)\n                            try {\n                                const response = await createViewKey(client,constants.LUCKY_NUMBER_CONTRACT_ADDRESS)\n                                successNotification(\"View Key Created!\")\n                                viewkeyDispatchState(response.viewing_key.key)\n                                localStorage.setItem(client.accountData.address,response.viewing_key.key)\n                            } catch (e) {\n                                errorNotification(e);\n                            } \n                            setCreateViewKeyLoading(false)\n                        }}\n                    > {\n                        createViewKeyLoading ?\n                        <i className=\"fa fa-spinner fa-spin\"></i>\n                             : \n                        \"Create View Key\"\n                    } </button>\n                    :\n                    \"Keplr connection failed\"\n                }\n            </div>\n        )\n    } else {\n        return null\n    }\n}","import { IClientState } from \"../context/ClientContext\";\nconst { fromUtf8 } = require(\"@iov/encoding\");\n\nexport default async (\n        client: IClientState, \n        contractAddress: string,\n        page: number,\n        page_size: number\n    ) => {\n    let queryMsg = { get_paginated_rounds: {tier1: true, tier2: true, tier3: true, page, page_size} };\n    const response = await client.execute.queryContractSmart(contractAddress, queryMsg);\n    return JSON.parse(atob(response)).get_paginated_rounds\n}\n\nexport interface PaginagedRounds {\n    tier1_rounds: Round[],\n    tier2_rounds: Round[],\n    tier3_rounds: Round[]\n}\n\nexport interface Round  {\n    round_number: number,\n    pool_size: string,\n    lucky_number: number | null,\n    users_count: number,\n    winner_users_count: number | null,\n    round_end_timestamp: number | null,\n    round_end_pool_size: string | null\n}","import { IClientState } from \"../context/ClientContext\";\nconst { fromUtf8 } = require(\"@iov/encoding\");\n\nexport default async (\n    client: IClientState,\n    contractAddress: string,\n    viewing_key: string,\n    page: number,\n    page_size: number\n) => {\n    try {\n        let queryMsg = { get_paginated_user_bets: { user_address: client.accountData.address, viewing_key, page, page_size } };\n        const response = await client.execute.queryContractSmart(contractAddress, queryMsg);\n        return JSON.parse(atob(response)).get_paginated_user_bets\n    } catch (e) {\n        if (e.message.includes(\"User+VK not valid!\")) {\n            localStorage.clear();\n        }\n        return {\n            user_bets: [],\n            bet_rounds: []\n        }\n    }\n}","import { IClientState } from \"../context/ClientContext\";\nconst { fromUtf8 } = require(\"@iov/encoding\");\n\nexport default async (\n        client: IClientState, \n        contractAddress: string\n    ) => {\n    let queryMsg = { get_tier_configs: {tier1: true, tier2: true, tier3: true} };\n    const response = await client.execute.queryContractSmart(contractAddress, queryMsg);\n    return JSON.parse(atob(response)).get_tier_configs\n}\n\nexport interface TierConfigs {\n    tier1_configs: TierConfig,\n    tier2_configs: TierConfig,\n    tier3_configs: TierConfig\n}\n\nexport interface TierConfig  {\n    entry_fee: string,\n    triggerer_fee: string,\n    min_entries: number,\n    max_rand_number: number\n}","import { IClientState } from \"../context/ClientContext\";\n\nexport default async (\n    client: IClientState,\n    contractAddress: string,\n    viewing_key: string,\n    keys: string[]\n) => {\n    try {\n        let queryMsg = { get_user_bets: { user_address: client.accountData.address, viewing_key, keys } };\n        const response = await client.execute.queryContractSmart(contractAddress, queryMsg);\n        return JSON.parse(atob(response)).get_user_bets\n    } catch (e){\n        if(e.message.includes(\"User+VK not valid!\")){\n            localStorage.clear();\n        }\n        return {\n            user_bets: []\n        }\n    }\n}\n\nexport interface UserBets {\n    user_bets: UserBet[]\n}\n\nexport interface UserBet {\n    round_number: number,\n    tier: number,\n    number: number,\n    claimed_reward: boolean,\n    timestamp: number,\n}","import React, { useState, createContext } from \"react\";\nimport { SigningCosmWasmClient } from \"secretjs\";\nimport { PaginagedRounds } from \"../api/getPaginatedRounds\";\n\nexport const CurrentRoundsStateContext = createContext<PaginagedRounds | null>(null);\nexport const CurrentRoundsStateDispatchContext = createContext<Function>(() => null);\n\nexport default (props: any) => {\n    const [CurrentRoundsState, setCurrentRoundsState] = useState<PaginagedRounds | null>(null) \n\n    return (\n        <CurrentRoundsStateContext.Provider value={CurrentRoundsState}>\n             <CurrentRoundsStateDispatchContext.Provider value={setCurrentRoundsState}>\n                {props.children}\n             </CurrentRoundsStateDispatchContext.Provider>\n        </CurrentRoundsStateContext.Provider>\n    );\n  }","import { IClientState } from \"../context/ClientContext\";\nconst { fromUtf8 } = require(\"@iov/encoding\");\n\nexport default async (\n    client: IClientState,\n    contractAddress: string,\n    tier1_rounds: number[],\n    tier2_rounds: number[],\n    tier3_rounds: number[],\n) => {\n    let queryMsg = { get_rounds: { tier1_rounds, tier2_rounds, tier3_rounds } };\n    const response = await client.execute.queryContractSmart(contractAddress, queryMsg);\n    return JSON.parse(atob(response)).get_rounds\n}","import constants from \"../constants\";\nimport { IClientState } from \"../context/ClientContext\";\nconst { fromUtf8 } = require(\"@iov/encoding\");\n\nexport default async (client: IClientState, contractAddress: string, tier: number, round: number) => {\n    let handleMsg = { withdrawl: {tier, round} };\n    const response = await client.execute.execute(contractAddress, handleMsg);\n    return JSON.parse(fromUtf8(response.data))\n}","import constants from \"../constants\";\nimport { IClientState } from \"../context/ClientContext\";\nconst { fromUtf8 } = require(\"@iov/encoding\");\n\nexport default async (client: IClientState, tokenAddress: string, contractAddress: string, tier: number, number: number, amount: string) => {\n    let msg= btoa(`{\\\"bet\\\": {\\\"tier\\\": ${tier}, \\\"number\\\": ${number}}}`)\n    let handleMsg = { send: {recipient: contractAddress, amount, msg} };\n    const response = await client.execute.execute(tokenAddress, handleMsg);\n    return JSON.parse(fromUtf8(response.data))\n} ","import { Dispatch, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport bet from \"../api/bet\";\nimport { Round } from \"../api/getPaginatedRounds\";\nimport { TierConfig, TierConfigs } from \"../api/getTierConfigs\";\nimport { UserBets } from \"../api/getUserBets\";\nimport withdrawl from \"../api/withdrawl\";\nimport constants from \"../constants\";\nimport { IClientState } from \"../context/ClientContext\";\nimport { errorNotification, successNotification } from \"../utils/notifications\";\n\nexport default ({\n    client,\n    viewkey,\n    poolNumber,\n    round,\n    pollConfig,\n    currentRoundsUserBets,\n    getSSCRTBalance, \n    triggerGetPaginatedUserBets,\n    getCurrentRoundsStateTrigger\n}: {\n    client: IClientState | null,\n    viewkey: String | null,\n    poolNumber: number,\n    round: Round,\n    pollConfig: TierConfig,\n    currentRoundsUserBets: UserBets | null,\n    getSSCRTBalance: Function,\n    triggerGetPaginatedUserBets: Function,\n    getCurrentRoundsStateTrigger: Function\n}) => {\n    const [buttonLoading, setButtonLoading] = useState<{ pool: number, round: number } | null>(null)\n    const [enterPoolModal, setEnterPoolModal] = useState<IEnterPoolModal>({\n        show: false,\n        data: null\n    })\n    return (\n        <div className=\"col round-container\">\n            <div className=\"row\">\n                <div className=\"col\" style={{ fontSize: \"1.25rem\", marginBottom: \"5px\" }}>\n                    Round {round.round_number} -\n                    {\n                        round.round_end_timestamp && round.round_end_pool_size ?\n                            <span style={{ marginLeft: \"5px\" }} className=\"badge badge-secondary\">Finished</span> :\n                            <span style={{ marginLeft: \"5px\" }} className=\"badge badge-success\">Open</span>\n                    }\n                </div>\n            </div>\n            {\n                round.round_end_timestamp && round.round_end_pool_size && round.lucky_number &&\n                <div className=\"row\" >\n                    <div className=\"col\" style={{ fontSize: \"1.5rem\", marginBottom: \"5px\" }}>\n                        {\"Lucky Number: \" + round.lucky_number}\n                    </div>\n                </div>\n            }\n            <div className=\"row\">\n                <div className=\"col\" style={{ marginBottom: \"5px\" }}>\n                    {\n                        round.round_end_timestamp && round.round_end_pool_size ?\n                            \"Triggered at \" + new Date(round.round_end_timestamp * 1000).toLocaleString() :\n                            poolNumber === 1 ? \"Trigger every 12h\" :\n                                poolNumber === 2 ? \"Trigger every 1h\" :\n                                    poolNumber === 3 && \"Trigger every 5m\"\n                    }\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <span style={{ fontSize: \"3rem\" }}>\n                        {\n                            round.round_end_timestamp && round.round_end_pool_size ?\n                                `${parseInt(round.round_end_pool_size) / 1000000}` :\n                                `${parseInt(round.pool_size) / 1000000}`\n                        }\n                    </span>\n                    <br />\n                    {\n                        round.round_end_timestamp && round.round_end_pool_size ?\n                            \"sSCRT Final Pool Size\" :\n                            \"sSCRT Pool Size\"\n                    }\n\n                </div>\n                <div className=\"col\">\n                    <div style={{ margin: \"5px\" }}>{round.users_count}/{pollConfig.min_entries} Participants</div>\n                    {\n                        round.winner_users_count !== null && <div style={{ margin: \"5px\" }}>{round.winner_users_count} {round.winner_users_count === 1 ? \"Winner\" : \"Winners\"}</div>\n                    }\n                    {\n                        currentRoundsUserBets && currentRoundsUserBets.user_bets.find((bet) => bet.tier === poolNumber && bet.round_number === round.round_number && !bet.claimed_reward && !round.round_end_timestamp) &&\n                        <button type=\"button\" className=\"btn btn-danger\" style={{ borderRadius: \"10px\", margin: \"5px\" }}\n                            onClick={async () => {\n                                try {\n                                    if (!client || !viewkey) return\n                                    setButtonLoading({ pool: poolNumber, round: round.round_number })\n                                    await withdrawl(client, constants.LUCKY_NUMBER_CONTRACT_ADDRESS, poolNumber, round.round_number)\n                                    await getCurrentRoundsStateTrigger(client, viewkey, true)\n                                    await triggerGetPaginatedUserBets()\n                                    await getSSCRTBalance()\n                                    setButtonLoading(null)\n                                    successNotification(\"Cancel Bet Success!\")\n                                } catch (e) {\n                                    setButtonLoading(null)\n                                    errorNotification(e)\n                                }\n                            }}\n                        >\n                            {`${parseInt(pollConfig.entry_fee) / 1000000} sSCRT`}\n                            <br />\n                            {\n                                buttonLoading && buttonLoading.pool === poolNumber && buttonLoading.round === round.round_number ?\n                                    <i className=\"fa fa-spinner fa-spin\"></i>\n                                    : \"Cancel Bet\"\n                            }\n                        </button>\n                    }\n                    {\n                        currentRoundsUserBets && currentRoundsUserBets.user_bets.find((bet) => bet.tier === poolNumber && bet.round_number === round.round_number && !bet.claimed_reward && round.round_end_timestamp && bet.number === round.lucky_number) &&\n                        <button type=\"button\" className=\"btn btn-success\" style={{ borderRadius: \"10px\", margin: \"5px\" }}\n                            onClick={async () => {\n                                try {\n                                    if (!client || !viewkey) return\n                                    setButtonLoading({ pool: poolNumber, round: round.round_number })\n                                    await withdrawl(client, constants.LUCKY_NUMBER_CONTRACT_ADDRESS, poolNumber, round.round_number)\n                                    await getCurrentRoundsStateTrigger(client, viewkey, true)\n                                    await getSSCRTBalance()\n                                    await triggerGetPaginatedUserBets()\n                                    setButtonLoading(null)\n                                    successNotification(\"Withdraw Winnings Success!\")\n                                } catch (e) {\n                                    setButtonLoading(null)\n                                    errorNotification(e)\n                                }\n                            }}\n                        >\n                            {\n                                round.round_end_pool_size && round.winner_users_count ? (parseInt(round.round_end_pool_size) / round.winner_users_count) / 1000000 + \" sSCRT\" : \"...\"\n                            }\n                            <br />\n                            {\n                                buttonLoading && buttonLoading.pool === poolNumber && buttonLoading.round === round.round_number ?\n                                    <i className=\"fa fa-spinner fa-spin\"></i>\n                                    : \"Claim\"\n                            }\n                        </button>\n                    }\n                    {\n                        currentRoundsUserBets && !currentRoundsUserBets.user_bets.find((bet) => bet.tier === poolNumber && bet.round_number === round.round_number) && !round.lucky_number &&\n                        <button type=\"button\" className=\"btn btn-info\" style={{ borderRadius: \"10px\", margin: \"5px\" }}\n                            onClick={() => setEnterPoolModal({\n                                show: true,\n                                data: {\n                                    pool: {\n                                        number: poolNumber,\n                                        configs: pollConfig\n                                    },\n                                    round: round\n                                }\n                            })}\n                        >\n                            {`${parseInt(pollConfig.entry_fee) / 1000000} sSCRT`}\n                            <br />\n                            Enter Pool\n                        </button>\n                    }\n                    {\n                        currentRoundsUserBets && currentRoundsUserBets.user_bets.find((bet) => bet.tier === poolNumber && bet.round_number === round.round_number && round.round_end_timestamp && bet.number !== round.lucky_number) &&\n                        <button disabled type=\"button\" className=\"btn btn-danger\" style={{ borderRadius: \"10px\", margin: \"5px\" }}>\n                            You Lost\n                        </button>\n                    }\n                    {\n                        currentRoundsUserBets && currentRoundsUserBets.user_bets.find((bet) => bet.tier === poolNumber && bet.round_number === round.round_number && bet.claimed_reward && round.round_end_timestamp) &&\n                        <button disabled type=\"button\" className=\"btn btn-secondary\" style={{ borderRadius: \"10px\", margin: \"5px\" }}>\n                            {\n                                round.round_end_pool_size && round.winner_users_count ? (parseInt(round.round_end_pool_size) / round.winner_users_count) / 1000000 + \" sSCRT\" : \"...\"\n                            }\n                            <br />\n                            Claimed\n                        </button>\n                    }\n                    {\n                        currentRoundsUserBets && !currentRoundsUserBets.user_bets.find((bet) => bet.tier === poolNumber && bet.round_number === round.round_number) && round.lucky_number &&\n                        <button type=\"button\" className=\"btn btn-secondary\" style={{ borderRadius: \"10px\", margin: \"5px\" }}>\n                            Finished\n                        </button>\n                    }\n\n                </div>\n            </div>\n            {\n                client && viewkey &&\n                <EnterPoolModal\n                    client={client}\n                    viewkey={viewkey}\n                    getCurrentRoundsStateTrigger={getCurrentRoundsStateTrigger}\n                    getSSCRTBalance={getSSCRTBalance}\n                    enterPoolModal={enterPoolModal}\n                    setEnterPoolModal={setEnterPoolModal}\n                    triggerGetPaginatedUserBets={triggerGetPaginatedUserBets}\n                />\n            }\n        </div>\n    )\n}\n\n\nconst EnterPoolModal = ({\n    client,\n    viewkey,\n    getCurrentRoundsStateTrigger,\n    getSSCRTBalance,\n    enterPoolModal,\n    setEnterPoolModal,\n    triggerGetPaginatedUserBets\n}: {\n    client: IClientState,\n    viewkey: String,\n    getCurrentRoundsStateTrigger: Function,\n    getSSCRTBalance: Function,\n    enterPoolModal: IEnterPoolModal,\n    setEnterPoolModal: Dispatch<IEnterPoolModal>,\n    triggerGetPaginatedUserBets: Function\n}) => {\n    const [number, setNumber] = useState<number | null>(null)\n    const [betLoading, setBetLoading] = useState(false)\n\n    return (\n        <Modal centered show={enterPoolModal.show} onHide={() => setEnterPoolModal({ show: false, data: null })} >\n                <div style={{ background: \"linear-gradient(180deg, #242525 0%, #000 180%)\", color: \"white\" }}>\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\">Enter Pool - Choose a Number to Bet</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" style={{ color: \"white\" }} onClick={() => setEnterPoolModal({ show: false, data: null })}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"row\">\n                            {\n                                enterPoolModal.data && Array.from(Array(enterPoolModal.data.pool.configs.max_rand_number).keys()).map((value, i) =>\n                                    <div className=\"col\" style={{textAlign:\"center\"}}>\n                                        <button type=\"button\" style={{ width: \"50px\", margin: \"5px\" }} className={`btn btn-${number && number === i + 1 ? \"success\" : \"secondary\"}`} onClick={() => setNumber(i + 1)}>\n                                            {i + 1}\n                                        </button>\n                                    </div>\n                                )\n                            }\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button\n                            disabled={number ? false : true}\n                            type=\"button\" className=\"btn btn-success py-2 px-4\" data-bs-dismiss=\"modal\" onClick={async () => {\n                                try {\n                                    if (!enterPoolModal.data || !number) return\n                                    setBetLoading(true)\n                                    await bet(client, constants.SSCRT_CONTRACT_ADDRESS, constants.LUCKY_NUMBER_CONTRACT_ADDRESS, enterPoolModal.data.pool.number, number, enterPoolModal.data.pool.configs.entry_fee)\n                                    await getCurrentRoundsStateTrigger(client, viewkey, true)\n                                    await getSSCRTBalance()\n                                    await triggerGetPaginatedUserBets()\n                                    setBetLoading(false)\n                                    setNumber(null)\n                                    setEnterPoolModal({ show: false, data: null })\n                                    successNotification(\"Bet Success!\")\n                                } catch (e) {\n                                    setBetLoading(false)\n                                    setNumber(null)\n                                    errorNotification(e)\n                                }\n                            }}>\n                            {\n                                !betLoading ? \"Bet\" : <i className=\"fa fa-spinner fa-spin\"></i>\n                            }\n                        </button>\n                        <button type=\"button\" className=\"btn btn-secondary py-2 px-4\" data-bs-dismiss=\"modal\" onClick={() => setEnterPoolModal({ show: false, data: null })}>Close</button>\n                    </div>\n                </div>\n        </Modal>\n    )\n}\n\ninterface IEnterPoolModal {\n    show: boolean,\n    data: {\n        pool: {\n            number: number,\n            configs: TierConfig\n        },\n        round: Round\n    } | null\n}","import { Dispatch, useEffect, useState } from \"react\"\nimport { PaginagedRounds, Round } from \"../api/getPaginatedRounds\"\nimport getPaginatedUserBets from \"../api/getPaginatedUserBets\"\nimport getRounds from \"../api/getRounds\"\nimport { TierConfig, TierConfigs } from \"../api/getTierConfigs\"\nimport { UserBet, UserBets } from \"../api/getUserBets\"\nimport withdrawl from \"../api/withdrawl\"\nimport constants from \"../constants\"\nimport { IClientState } from \"../context/ClientContext\"\nimport { errorNotification, successNotification } from \"../utils/notifications\"\nimport RoundComponent from \"./RoundComponent\"\nimport { Col, Dropdown, Form } from \"react-bootstrap\"\n\nexport default ({\n    client,\n    viewkey,\n    currentRoundsState,\n    pollConfigs,\n    currentRoundsUserBets,\n    getSSCRTBalance,\n    paginatedUserBets,\n    triggerGetPaginatedUserBets,\n    getCurrentRoundsStateTrigger,\n    paginationValues,\n    setPaginationsValues\n}: {\n    client: IClientState | null,\n    viewkey: string | null,\n    currentRoundsState: PaginagedRounds | null,\n    pollConfigs: TierConfigs | null,\n    currentRoundsUserBets: UserBets | null,\n    getSSCRTBalance: Function,\n    paginatedUserBets: { user_bets: UserBet[], bet_rounds: Round[], user_bets_total_count: number } | null,\n    triggerGetPaginatedUserBets: Function,\n    getCurrentRoundsStateTrigger: Function,\n    paginationValues: {\n        page_size: number,\n        page: number\n    },\n    setPaginationsValues: Dispatch<{\n        page_size: number,\n        page: number\n    }>\n}) => {\n    const [buttonLoading, setButtonLoading] = useState<{ pool: number, round: number } | null>(null)\n    const [roundViewer, setRoundViewer] = useState<{ pollNumber: number, round: Round, pollConfig: TierConfig | null } | null>(null)\n    const [searchState, setSearchState] = useState<{\n        loading: boolean,\n        pool: string,\n        round: string\n    }>({\n        loading: false,\n        pool: \"1\",\n        round: \"\"\n    })\n\n    useEffect(() => {\n        triggerGetPaginatedUserBets();\n    }, [client, viewkey])\n\n    const triggerGetRound = async (pollNumber: number, round: number) => {\n        if (!client || !pollConfigs ) return\n        let tier1_rounds = [];\n        let tier2_rounds = [];\n        let tier3_rounds = [];\n\n        if (pollNumber === 1) tier1_rounds.push(round)\n        if (pollNumber === 2) tier2_rounds.push(round)\n        if (pollNumber === 3) tier3_rounds.push(round)\n\n        try{\n            const response = await getRounds(client, constants.LUCKY_NUMBER_CONTRACT_ADDRESS, tier1_rounds, tier2_rounds, tier3_rounds)\n            const roundState: Round = response.rounds[0];\n    \n            setRoundViewer({\n                pollNumber,\n                round: roundState,\n                pollConfig: pollNumber === 1 ? pollConfigs.tier1_configs : pollNumber === 2 ? pollConfigs.tier2_configs : pollNumber === 3 ? pollConfigs.tier3_configs : null\n            })\n        } catch (e) {\n            errorNotification(e)\n        }\n    }\n\n    const handlePageChange = async (page: number) => {\n        triggerGetPaginatedUserBets(page - 1, paginationValues.page_size)\n        setPaginationsValues({\n            page,\n            page_size: 5\n        })\n    }\n\n\n    if (currentRoundsState && pollConfigs && paginatedUserBets) {\n        return (\n            <div style={{ color: \"white\", width: \"100%\" }}>\n\n                <div className=\"row\" style={{ margin: \"0px\" }} >\n                    <div className=\"col-8\">\n                        <div className=\"row\" style={{ justifyContent: \"center\", margin: \"0px\" }}>\n                            <h2>Bets</h2>\n                        </div>\n                        <table className=\"table table-striped table-dark\" style={{ margin: \"20px\" }}>\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\">Date</th>\n                                    <th scope=\"col\">Pool</th>\n                                    <th scope=\"col\">Round</th>\n                                    <th scope=\"col\">Lucky Number</th>\n                                    <th scope=\"col\">My Number</th>\n                                    <th scope=\"col\">Entry</th>\n                                    <th scope=\"col\">Reward</th>\n                                    <th scope=\"col\">Status</th>\n                                    <th scope=\"col\">Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n\n                                }\n                                {paginatedUserBets.user_bets.map((bet, i) => {\n                                    return (\n                                        <tr key={i}>\n                                            <td style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>\n                                                {new Date(bet.timestamp * 1000).toLocaleDateString()}\n                                                <br />\n                                                {new Date(bet.timestamp * 1000).toLocaleTimeString()}\n                                            </td>\n                                            <td style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>{bet.tier}</td>\n                                            <td style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>{bet.round_number}</td>\n                                            <td style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>{\n                                                paginatedUserBets.bet_rounds[i].lucky_number !== null ? paginatedUserBets.bet_rounds[i].lucky_number : \" - \"\n                                            }</td>\n                                            <td style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>{bet.number}</td>\n                                            <td style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>\n                                                {\n                                                    bet.tier === 1 ? parseInt(pollConfigs.tier1_configs.entry_fee) / 1000000 + \" sSCRT\" :\n                                                        bet.tier === 2 ? parseInt(pollConfigs.tier2_configs.entry_fee) / 1000000 + \" sSCRT\" :\n                                                            bet.tier === 3 ? parseInt(pollConfigs.tier3_configs.entry_fee) / 1000000 + \" sSCRT\" :\n                                                                \"-\"\n                                                }\n                                            </td>\n                                            <td style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>\n                                                {\n                                                    paginatedUserBets.bet_rounds[i].lucky_number !== null &&\n                                                        bet.number === paginatedUserBets.bet_rounds[i].lucky_number &&\n                                                        paginatedUserBets.bet_rounds[i].round_end_pool_size &&\n                                                        paginatedUserBets.bet_rounds[i].winner_users_count !== null ?\n                                                        (parseInt(paginatedUserBets.bet_rounds[i].round_end_pool_size!) / paginatedUserBets.bet_rounds[i].winner_users_count!) / 1000000 + \" sSCRT\" : \" - \"\n                                                }\n                                            </td>\n                                            <td style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>\n                                                {paginatedUserBets.bet_rounds[i].lucky_number === null ? \"Pending\" : bet.number === paginatedUserBets.bet_rounds[i].lucky_number ? \"Winner\" : \"Loser\"}\n                                            </td>\n                                            <td style={{ display: \"table-cell\", verticalAlign: \"middle\" }}>\n                                                {\n                                                    paginatedUserBets.bet_rounds[i].lucky_number !== null &&\n                                                    bet.number === paginatedUserBets.bet_rounds[i].lucky_number &&\n                                                    bet.claimed_reward === false &&\n                                                    <button type=\"button\" className=\"btn btn-success\" style={{ borderRadius: \"10px\", margin: \"5px\" }}\n                                                        disabled={(buttonLoading && buttonLoading.pool === bet.tier && buttonLoading.round === paginatedUserBets.bet_rounds[i].round_number) ? true : false}\n                                                        onClick={async () => {\n                                                            try {\n                                                                if (!client) return\n                                                                setButtonLoading({ pool: bet.tier, round: paginatedUserBets.bet_rounds[i].round_number })\n                                                                await withdrawl(client, constants.LUCKY_NUMBER_CONTRACT_ADDRESS, bet.tier, paginatedUserBets.bet_rounds[i].round_number)\n                                                                await triggerGetPaginatedUserBets()\n                                                                await getSSCRTBalance()\n                                                                setButtonLoading(null)\n                                                                successNotification(\"Withdraw Winnings Success!\")\n                                                            } catch (e) {\n                                                                setButtonLoading(null)\n                                                                errorNotification(e)\n                                                            }\n                                                        }}>\n                                                        {\n                                                            buttonLoading && buttonLoading.pool === bet.tier && buttonLoading.round === paginatedUserBets.bet_rounds[i].round_number ?\n                                                                <i className=\"fa fa-spinner fa-spin\"></i>\n                                                                : \"Claim\"\n                                                        }\n                                                    </button>\n                                                }\n                                                {\n                                                    paginatedUserBets.bet_rounds[i].lucky_number !== null &&\n                                                    bet.number === paginatedUserBets.bet_rounds[i].lucky_number &&\n                                                    bet.claimed_reward === true &&\n                                                    <button disabled type=\"button\" className=\"btn btn-secondary\" style={{ borderRadius: \"10px\", margin: \"5px\" }}>\n                                                        Claimed\n                                                    </button>\n                                                }\n\n                                                {\n                                                    paginatedUserBets.bet_rounds[i].lucky_number !== null &&\n                                                    <button\n                                                        type=\"button\"\n                                                        className=\"btn btn-secondary\"\n                                                        style={{ borderRadius: \"10px\", margin: \"5px\" }}\n                                                        disabled={\n                                                            roundViewer &&\n                                                                (roundViewer.pollNumber === bet.tier && roundViewer.round.round_number === paginatedUserBets.bet_rounds[i].round_number) ? true : false\n                                                        }\n                                                        onClick={() => setRoundViewer({\n                                                            round: paginatedUserBets.bet_rounds[i],\n                                                            pollConfig:\n                                                                bet.tier === 1 ? pollConfigs.tier1_configs :\n                                                                    bet.tier === 2 ? pollConfigs.tier2_configs :\n                                                                        bet.tier === 3 ? pollConfigs.tier3_configs :\n                                                                            null,\n                                                            pollNumber: bet.tier\n                                                        })}\n                                                    > <i className=\"fas fa-eye\"></i> </button>\n                                                }\n                                            </td>\n                                        </tr>\n                                    )\n                                }\n\n                                )}\n                            </tbody>\n                        </table>\n                        <div className=\"d-flex align-items-center\">\n                            <div className=\"ml-auto mr-3\">\n                                {paginatedUserBets.user_bets_total_count > 0 && \"Total number of bets: \" + paginatedUserBets.user_bets_total_count}\n                            </div>\n                            {\n                                paginatedUserBets.user_bets_total_count > 0 &&\n                                <nav aria-label=\"...\">\n                                    <ul className=\"pagination mb-0 my-3\">\n                                        <button className=\"page-item btn btn-secondary rounded-0\"\n                                            disabled={paginationValues.page === 1}\n                                            onClick={() => handlePageChange(1)}>\n                                            <i className=\"fas fa-angle-double-left\"></i>\n                                        </button>\n                                        <button className=\"page-item btn btn-secondary rounded-0\" onClick={() => handlePageChange(paginationValues.page - 1 > 0 ? paginationValues.page - 1 : 1)}>\n                                            <i className=\"fas fa-angle-left\"></i>\n                                        </button>\n                                        <button\n                                            className=\"page-item btn btn-secondary rounded-0\"\n                                            onClick={() =>\n                                                handlePageChange(paginationValues.page + 1 < Math.ceil(paginatedUserBets.user_bets_total_count / paginationValues.page_size) ? paginationValues.page + 1 : Math.ceil(paginatedUserBets.user_bets_total_count / paginationValues.page_size))\n                                            }>\n                                            <i className=\"fas fa-angle-right\"></i>\n                                        </button>\n                                        <button className=\"page-item btn btn-secondary rounded-0\"\n                                            disabled={paginationValues.page === Math.ceil(paginatedUserBets.user_bets_total_count / paginationValues.page_size)}\n                                            onClick={() => handlePageChange(Math.ceil(paginatedUserBets.user_bets_total_count / paginationValues.page_size))}>\n                                            <i className=\"fas fa-angle-double-right\"></i>\n                                        </button>\n                                    </ul>\n                                </nav>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"col\" style={{ justifyContent: \"center\", marginLeft:\"50px\" }}>\n                        <div className=\"row\" style={{ justifyContent: \"center\", margin: \"0px\" }}>\n                            <h2>Search previous Pool/Round</h2>\n                        </div>\n                        {\n                            /*\n                            <div className=\"row\" style={{ justifyContent: \"center\", margin: \"20px\" }}>\n                            Pool\n                            <Dropdown style={{margin:\"10px\"}}>\n                                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\n                                    {searchState.pool}\n                                </Dropdown.Toggle>\n                                <Dropdown.Menu>\n                                    <Dropdown.Item onClick={() => setSearchState({...searchState, pool: \"1\"})}>1</Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setSearchState({...searchState, pool: \"2\"})}>2</Dropdown.Item>\n                                    <Dropdown.Item onClick={() => setSearchState({...searchState, pool: \"3\"})}>3</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n\n                            Round: <input type=\"number\"/>\n                            <button type=\"button\" className=\"btn btn-secondary\"> <i className=\"fas fa-search\"></i> </button>\n                        </div>\n                            */\n                        }\n\n                        {\n                            roundViewer && roundViewer.pollConfig &&\n                            <div>\n\n                                <div className=\"row\" style={{ justifyContent: \"center\", margin: \"10px\" }}>\n                                    <h3>{\"Pool \" + roundViewer.pollNumber + \" - Round \" + roundViewer.round.round_number}</h3>\n                                </div>\n                                <div className=\"row\" style={{ justifyContent: \"center\" }}>\n                                    <RoundComponent\n                                        client={client}\n                                        viewkey={viewkey}\n                                        poolNumber={1}\n                                        round={roundViewer.round}\n                                        pollConfig={roundViewer.pollConfig}\n                                        currentRoundsUserBets={currentRoundsUserBets}\n                                        getSSCRTBalance={getSSCRTBalance}\n                                        getCurrentRoundsStateTrigger={getCurrentRoundsStateTrigger}\n                                        triggerGetPaginatedUserBets={triggerGetPaginatedUserBets}\n                                    />\n                                </div>\n\n                            </div>\n                        }\n                        <Form style={{ margin: \"20px\" }}>\n                            <Form.Row>\n                                <Form.Group as={Col} style={{textAlign: \"left\", width: \"80%\"}}>\n                                    <Form.Label>Pool</Form.Label>\n                                    <Form.Control as=\"select\" defaultValue=\"-\" style={{textAlignLast: \"center\"}}\n                                    value={searchState.pool}\n                                    onChange={(e) => setSearchState({\n                                        ...searchState,\n                                        pool: e.target.value\n                                    })}\n                                    >\n                                        <option value={1}>1</option>\n                                        <option value={2}>2</option>\n                                        <option value={3}>3</option>\n                                    </Form.Control>\n                                </Form.Group>\n\n                                <Form.Group as={Col} style={{textAlign: \"left\"}}>\n                                    <Form.Label>Round</Form.Label>\n                                    <Form.Control type=\"number\" placeholder=\"Round\" min={0} style={{textAlign: \"center\"}}\n                                        value={searchState.round}\n                                        onChange={(e) => setSearchState({\n                                            ...searchState,\n                                            round: e.target.value\n                                        })}\n                                    />\n                                </Form.Group>\n\n                                <Form.Group as={Col} style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                                    <button type=\"button\" style={{width: \"70%\", height: \"70%\"}}\n                                        disabled={\n                                            searchState.round === \"\" || \n                                            searchState.pool === \"1\" && parseInt(searchState.round) >= currentRoundsState.tier1_rounds[0].round_number ||\n                                            searchState.pool === \"2\" && parseInt(searchState.round) >= currentRoundsState.tier2_rounds[0].round_number ||\n                                            searchState.pool === \"3\" && parseInt(searchState.round) >= currentRoundsState.tier3_rounds[0].round_number\n                                        }\n                                        onClick={() => {\n                                            if (!client) return\n                                            triggerGetRound(\n                                                parseInt(searchState.pool),\n                                                parseInt(searchState.round) \n                                                )\n                                        }}\n                                        className=\"btn btn-info\"><i className=\"fas fa-search\"></i></button>\n                                </Form.Group>\n                            </Form.Row>\n\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        )\n    } else {\n        return null\n    }\n}","import React, { Dispatch, useContext, useEffect, useState } from \"react\";\nimport { inherits } from \"util\";\nimport bet from \"../api/bet\";\nimport getBalance from \"../api/getBalance\";\nimport getRounds, { Round, PaginagedRounds } from \"../api/getPaginatedRounds\";\nimport getTierConfigs, { TierConfig, TierConfigs } from \"../api/getTierConfigs\";\nimport getUserBets, { UserBets } from \"../api/getUserBets\";\nimport withdrawl from \"../api/withdrawl\";\nimport constants from \"../constants\";\nimport { BalancesContext, BalancesDispatchContext } from \"../context/BalancesContext\";\nimport { ClientContext, IClientState } from \"../context/ClientContext\";\nimport { ViewKeyContext } from \"../context/ViewKeyContext\";\nimport { errorNotification, successNotification } from \"../utils/notifications\";\nimport RoundComponent from \"./RoundComponent\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\"\nimport formatNumber from \"../utils/formatNumber\";\n\nexport default ({\n    client,\n    viewkey,\n    currentRoundsState,\n    pollConfigs,\n    currentRoundsUserBets,\n    getSSCRTBalance,\n    triggerGetPaginatedUserBets,\n    getCurrentRoundsStateTrigger\n}: {\n    client: IClientState | null,\n    viewkey: String | null,\n    currentRoundsState: PaginagedRounds | null,\n    pollConfigs: TierConfigs | null,\n    currentRoundsUserBets: UserBets | null,\n    getSSCRTBalance: Function,\n    triggerGetPaginatedUserBets: Function,\n    getCurrentRoundsStateTrigger: Function\n}) => {\n    if (currentRoundsState && pollConfigs) {\n        return (\n            <div style={{ color: \"white\", width: \"100%\" }}>\n                <div className=\"row\" style={{ justifyContent: \"center\", margin: \"0px\" }}>\n                    <h2>sSCRT Pools</h2>\n                </div>\n                <div className=\"tiers-container\">\n                    <div className=\"row pools-row\">\n                        <div className=\"col\">\n                            <div className=\"row\" style={{ color: \"white\", justifyContent: \"center\", marginRight: \"0px\", marginLeft: \"0px\" }}>\n                                <OverlayTrigger\n                                    placement=\"top\"\n                                    delay={{ show: 250, hide: 400 }}\n                                    overlay={(props) => (\n                                        <Tooltip id=\"button-tooltip\" {...props} >\n                                            <div style={{textAlign: \"left\"}}>\n                                            {\"Minumum Participants: \" + pollConfigs.tier1_configs.min_entries}\n                                            <br/>\n                                            {\"Numbers: 1 - \" + pollConfigs.tier1_configs.max_rand_number}\n                                            <br/>\n                                            {\"Entry Fee: \" + formatNumber(parseInt(pollConfigs.tier1_configs.entry_fee)/1000000)  + \" sSCRT\"}\n                                            <br/>\n                                            {\"Triggerer Fee: \" + formatNumber(parseInt(pollConfigs.tier1_configs.triggerer_fee)/1000000)  + \" sSCRT\"}\n                                            </div>\n                                        </Tooltip>)}\n                                >\n                                    <i className=\"far fa-question-circle\"></i>\n                                </OverlayTrigger>\n                                <h2 style={{ marginLeft: \"4px\" }}> Pool 1 </h2>\n                            </div>\n                            <div className=\"row tier-row\">\n                                {\n                                    currentRoundsState.tier1_rounds.length > 0 &&\n                                    currentRoundsState.tier1_rounds.map((round) =>\n                                        <RoundComponent\n                                            client={client}\n                                            viewkey={viewkey}\n                                            poolNumber={1}\n                                            round={round}\n                                            pollConfig={pollConfigs.tier1_configs}\n                                            currentRoundsUserBets={currentRoundsUserBets}\n                                            getSSCRTBalance={getSSCRTBalance}\n                                            getCurrentRoundsStateTrigger={getCurrentRoundsStateTrigger}\n                                            triggerGetPaginatedUserBets={triggerGetPaginatedUserBets}\n                                        />\n                                    )\n                                }\n                            </div>\n                        </div>\n                        <div className=\"col\">\n                            <div className=\"row\" style={{ color: \"white\", justifyContent: \"center\", marginRight: \"0px\", marginLeft: \"0px\" }}>\n                            <OverlayTrigger\n                                    placement=\"top\"\n                                    delay={{ show: 250, hide: 400 }}\n                                    overlay={(props) => (\n                                        <Tooltip id=\"button-tooltip\" {...props} >\n                                            <div style={{textAlign: \"left\"}}>\n                                            {\"Minumum Participants: \" + pollConfigs.tier2_configs.min_entries}\n                                            <br/>\n                                            {\"Numbers: 1 - \" + pollConfigs.tier2_configs.max_rand_number}\n                                            <br/>\n                                            {\"Entry Fee: \" + formatNumber(parseInt(pollConfigs.tier2_configs.entry_fee)/1000000)  + \" sSCRT\"}\n                                            <br/>\n                                            {\"Triggerer Fee: \" + formatNumber(parseInt(pollConfigs.tier2_configs.triggerer_fee)/1000000)  + \" sSCRT\"}\n                                            </div>\n                                        </Tooltip>)}\n                                >\n                                    <i className=\"far fa-question-circle\"></i>\n                                </OverlayTrigger><h2 style={{ marginLeft: \"4px\" }}> Pool 2 </h2>\n                            </div>\n                            <div className=\"row tier-row\">\n                                {\n                                    currentRoundsState.tier2_rounds.length > 0 &&\n                                    currentRoundsState.tier2_rounds.map((round) =>\n                                        <RoundComponent\n                                            client={client}\n                                            viewkey={viewkey}\n                                            poolNumber={2}\n                                            round={round}\n                                            pollConfig={pollConfigs.tier2_configs}\n                                            currentRoundsUserBets={currentRoundsUserBets}\n                                            getSSCRTBalance={getSSCRTBalance}\n                                            getCurrentRoundsStateTrigger={getCurrentRoundsStateTrigger}\n                                            triggerGetPaginatedUserBets={triggerGetPaginatedUserBets}\n                                        />)\n                                }\n                            </div>\n                        </div>\n                        <div className=\"col\">\n                            <div className=\"row\" style={{ color: \"white\", justifyContent: \"center\", marginRight: \"0px\", marginLeft: \"0px\" }}>\n                            <OverlayTrigger\n                                    placement=\"top\"\n                                    delay={{ show: 250, hide: 400 }}\n                                    overlay={(props) => (\n                                        <Tooltip id=\"button-tooltip\" {...props} >\n                                            <div style={{textAlign: \"left\"}}>\n                                            {\"Minumum Participants: \" + pollConfigs.tier3_configs.min_entries}\n                                            <br/>\n                                            {\"Numbers: 1 - \" + pollConfigs.tier3_configs.max_rand_number}\n                                            <br/>\n                                            {\"Entry Fee: \" + formatNumber(parseInt(pollConfigs.tier3_configs.entry_fee)/1000000)  + \" sSCRT\"}\n                                            <br/>\n                                            {\"Triggerer Fee: \" + formatNumber(parseInt(pollConfigs.tier3_configs.triggerer_fee)/1000000)  + \" sSCRT\"}\n                                            </div>\n                                        </Tooltip>)}\n                                >\n                                    <i className=\"far fa-question-circle\"></i>\n                                </OverlayTrigger><h2 style={{ marginLeft: \"4px\" }}> Pool 3 </h2>\n                            </div>\n                            <div className=\"row tier-row\">\n                                {\n                                    currentRoundsState.tier3_rounds.length > 0 &&\n                                    currentRoundsState.tier3_rounds.map((round) =>\n                                        <RoundComponent\n                                            client={client}\n                                            viewkey={viewkey}\n                                            poolNumber={3}\n                                            round={round}\n                                            pollConfig={pollConfigs.tier3_configs}\n                                            currentRoundsUserBets={currentRoundsUserBets}\n                                            getSSCRTBalance={getSSCRTBalance}\n                                            getCurrentRoundsStateTrigger={getCurrentRoundsStateTrigger}\n                                            triggerGetPaginatedUserBets={triggerGetPaginatedUserBets}\n                                        />)\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    } else {\n        return null // loading\n    }\n}","import { useContext, useEffect, useState } from \"react\"\nimport getBalance from \"../api/getBalance\"\nimport getPaginatedRounds, { PaginagedRounds, Round } from \"../api/getPaginatedRounds\"\nimport getPaginatedUserBets from \"../api/getPaginatedUserBets\"\nimport getTierConfigs, { TierConfigs } from \"../api/getTierConfigs\"\nimport getUserBets, { UserBet, UserBets } from \"../api/getUserBets\"\nimport constants from \"../constants\"\nimport { BalancesDispatchContext } from \"../context/BalancesContext\"\nimport { ClientContext, IClientState } from \"../context/ClientContext\"\nimport { CurrentRoundsStateContext, CurrentRoundsStateDispatchContext } from \"../context/CurrentRoundsStateContext\"\nimport { ViewKeyContext } from \"../context/ViewKeyContext\"\nimport Bets from \"./Bets\"\nimport Pools from \"./Pools\"\n\nexport default () => {\n    const client = useContext(ClientContext);\n    const viewkey = useContext(ViewKeyContext);\n    const balancesDispatch = useContext(BalancesDispatchContext);\n    const currentRoundsState = useContext(CurrentRoundsStateContext);\n    const currentRoundsStateDispatch = useContext(CurrentRoundsStateDispatchContext);\n\n    //const [currentRoundsState, setCurrentRoundsState] = useState<PaginagedRounds | null>(null)\n    const [pollConfigs, setPollConfigs] = useState<TierConfigs | null>(null)\n    const [currentRoundsUserBets, setCurrentRoundsUserBets] = useState<UserBets | null>(null)\n    const [paginatedUserBets, setPaginatedUserBets] = useState<{ user_bets: UserBet[], bet_rounds: Round[], user_bets_total_count: number } | null>(null);\n    const [paginationValues, setPaginationsValues] = useState<{\n        page_size: number,\n        page: number\n    }>({\n        page_size: 5,\n        page: 1\n    })\n\n    useEffect(() => {\n        if (client && viewkey) {\n            getTierConfigsTrigger(client)\n            getCurrentRoundsStateTrigger(client, viewkey, true)\n            // Trigger refresh every 30 sec\n            setInterval(() => {\n                if ( new Date().getSeconds() === 30 || new Date().getSeconds() === 0 ) {\n                    getCurrentRoundsStateTrigger(client, viewkey, false)\n                    triggerGetPaginatedUserBets(paginationValues.page - 1,paginationValues.page_size)\n                }\n            },1000); // check every second if we are at the 30 seconds or 0 seconds of every minute, then trigger\n        }\n    }, [client, viewkey])\n\n    const getTierConfigsTrigger = async (client: IClientState) => {\n        const tierConfigs = await getTierConfigs(client, constants.LUCKY_NUMBER_CONTRACT_ADDRESS)\n        setPollConfigs(tierConfigs)\n    } \n\n    const getCurrentRoundsStateTrigger = async (client: IClientState, viewkey: string, triggerCurrentRoundUserBets: boolean = false) => {\n        const paginatedRounds = await getPaginatedRounds(client, constants.LUCKY_NUMBER_CONTRACT_ADDRESS, 0, 1)\n        currentRoundsStateDispatch(paginatedRounds)\n        if(triggerCurrentRoundUserBets) {\n            getCurrentRoundUserBets(client, viewkey, paginatedRounds)\n        }\n    }\n\n    const getCurrentRoundUserBets = async (client: IClientState, viewkey: string, paginatedRounds: PaginagedRounds) => {\n        const getCurrentRoundUserBetsResponse = await getUserBets(client, constants.LUCKY_NUMBER_CONTRACT_ADDRESS, viewkey,[\n            \"tier1_round\" + paginatedRounds.tier1_rounds[0].round_number,\n            \"tier2_round\" + paginatedRounds.tier2_rounds[0].round_number,\n            \"tier3_round\" + paginatedRounds.tier3_rounds[0].round_number,\n        ])\n        setCurrentRoundsUserBets(getCurrentRoundUserBetsResponse)\n    }\n\n    const getSSCRTBalance = async () => {\n        if (!client) return null\n        const response = await getBalance(client, constants.SSCRT_CONTRACT_ADDRESS)\n        const accountData = await client.execute.getAccount(client.accountData.address);\n        balancesDispatch({\n            native: parseInt(accountData ? accountData.balance[0].amount : \"0\"),\n            sSCRT: response\n        })\n    }\n\n    const triggerGetPaginatedUserBets = async (page: number, page_size: number) => {\n        if (!client || !viewkey) return\n        const response = await getPaginatedUserBets(client, constants.LUCKY_NUMBER_CONTRACT_ADDRESS, viewkey, page || 0, page_size || 5)\n        setPaginatedUserBets(response)\n    }\n\n    return (\n        <div> \n            <Pools\n                client={client}\n                viewkey={viewkey} \n                currentRoundsState={currentRoundsState}\n                pollConfigs={pollConfigs}\n                currentRoundsUserBets={currentRoundsUserBets}\n                getSSCRTBalance={getSSCRTBalance}\n                getCurrentRoundsStateTrigger={getCurrentRoundsStateTrigger}\n                triggerGetPaginatedUserBets={triggerGetPaginatedUserBets}\n            />\n            <Bets \n                client={client}\n                viewkey={viewkey} \n                currentRoundsState={currentRoundsState}\n                pollConfigs={pollConfigs}\n                currentRoundsUserBets={currentRoundsUserBets}\n                getSSCRTBalance={getSSCRTBalance}\n                paginatedUserBets={paginatedUserBets}\n                getCurrentRoundsStateTrigger={getCurrentRoundsStateTrigger}\n                triggerGetPaginatedUserBets={triggerGetPaginatedUserBets}\n                paginationValues={paginationValues}\n                setPaginationsValues={setPaginationsValues}\n            />\n        </div>  \n    )\n}","import React, { Dispatch, useEffect, useState } from 'react';\nimport ClientContextProvider, { ClientContext, ClientDispatchContext } from \"./context/ClientContext\";\nimport ReactNotification from 'react-notifications-component'\nimport logo from './logo.svg';\nimport './App.css';\nimport { SigningCosmWasmClient } from 'secretjs';\nimport KeplrSetup from './containers/KeplrSetup';\nimport NavBar from './containers/NavBar';\nimport CreateViewkey from './containers/CreateViewkey';\nimport ViewKeyContextProvider, { ViewKeyContext } from './context/ViewKeyContext';\nimport BalancesContextProvices from './context/BalancesContext';\nimport Home from './containers/Home';\nimport CurrentRoundsStateContext from './context/CurrentRoundsStateContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ClientContextProvider>\n        <ViewKeyContextProvider>\n          <BalancesContextProvices>\n            <CurrentRoundsStateContext>\n            <div style={{ background: \"linear-gradient(180deg, #242525 0%, #000 180%)\", width: \"100%\", minHeight: \"100vh\" }}>\n              <ReactNotification />\n              <KeplrSetup />\n              <NavBar />\n              <CreateViewkey />\n              <Home />\n            </div>\n           </CurrentRoundsStateContext>\n          </BalancesContextProvices>\n        </ViewKeyContextProvider>\n      </ClientContextProvider>\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'react-notifications-component/dist/theme.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}