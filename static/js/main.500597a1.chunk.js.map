{"version":3,"sources":["requests/getViewKey.js","Containers/ViewKeyButton.js","Containers/MyLimitOrders.tsx","Containers/CreateNewLimitOrder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fromUtf8","require","client","tokenAddress","a","handleMsg","create_viewing_key","entropy","execute","response","apiKey","JSON","parse","data","key","viewing_key","ORDERS_FACTORY_ADDRESS","viewKey","setViewKey","useState","loading","setLoading","useEffect","ready","viewKeys","localStorage","getItem","accountData","address","value","Button","variant","onClick","getViewKey","setItem","stringify","Spinner","animation","remountMyLimitOrders","tokensData","myLimitOrders","setMyLimitOrders","queryContractSmart","user_secret_order_books","init","Table","striped","bordered","hover","user_secret_order_book","map","orderBookAddress","MyLimitOrder","limitOrdersData","setLimitOrdersData","orderBookTokensData","setOrderBookTokensData","ammPriceData","setAmmPriceData","limitOrderPromise","get_limit_orders","user_address","user_viewkey","orderBookTokenDataPromise","order_book_pair_info","Promise","all","limitOrders","orderBookTokenData","getAmmPrice","setInterval","amm_pair_address","simulation","offer_asset","info","token","assets_info","amount","Math","pow","find","dst_address","contract_addr","decimals","displayBalance","index","limitOrderData","is_withdrew","tokenData","round","withdrew_balance","decimal_places","display_props","symbol","balances","displayPrice","type","token1Data","token2Data","price","return_amount","is_bid","deposit_amount","pairDisplay","findTokenData","getDepositedAmount","getExpectedAmount","expected_amount","rowStyle","active_order","backgroundColor","status","undefined","Fragment","style","Date","timestamp","toLocaleString","withdraw_limit_order","update","arr","filter","alert","history_orders","length","history_order","AMM_FACTORY_ADDRESS","showCreateLimitOrderModal","setShowCreateLimitOrderModal","ammFactoryPairs","setAmmFactoryPairs","selectedAmmFactoryPairIndex","setSelectedAmmFactoryPairIndex","createLimitOrderLoading","setCreateLimitOrderLoading","selectedAmmPriceLoading","setSelectedAmmPairPriceLoading","selectedAmmPairPrice","setSelectedAmmPairPrice","isInstanciated","orderBookPair","setOrderBookPair","limitOrderIsBidInput","setLimitOrderIsBidInput","limitOrderAmountInput","setLimitOrderAmountInput","limitOrderPriceInput","setLimitOrderPriceInput","pairs","responsePromiseAMM","responsePromiseOrderBook","getOrderBook","responseAMM","responseOrderBook","secret_order_books","secret_order_book","getData","asset_infos","contract_address","getTokenSymbol","displaySymbolPair","pair","token1Address","native_token","denom","token2Address","Modal","show","onHide","Header","closeButton","Title","Body","DropdownButton","id","title","Dropdown","Item","otherTokenData","getCurrentPrice","marginRight","onChange","e","target","disabled","width","Error","limitOrderExpectedAmount","send","recipient","floor","msg","btoa","create_limit_order","getCodeHashByContractAddr","hash","new_secret_order_book_instanciate","amm_pair_hash","Footer","SSCRT_CONTRACT_ADDRESS","App","setClient","setTokensData","remountMyLimitOrdersCount","setRemountMyLimitOrdersCount","setupKeplr","axios","get","className","ViewKeyButton","CreateNewLimitOrder","MyLimitOrders","CHAIN_ID","sleep","ms","accept","setTimeout","window","keplr","getOfflineSigner","getEnigmaUtils","experimentalSuggestChain","chainId","chainName","rpc","rest","bip44","coinType","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","features","enable","keplrOfflineSigner","getAccounts","accounts","SigningCosmWasmClient","gas","exec","getAccount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.500597a1.chunk.js","sourcesContent":["const { fromUtf8 } = require(\"@iov/encoding\");\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default async (client, tokenAddress) => {\n    let handleMsg = { create_viewing_key: {entropy: \"1321313123\"} };\n    const response = await client.execute(tokenAddress, handleMsg);\n    const apiKey = JSON.parse(fromUtf8(response.data))\n    if (apiKey.create_viewing_key) {\n      return apiKey.create_viewing_key.key\n    } else if (apiKey.viewing_key) {\n      return apiKey.viewing_key.key\n    }\n  }","import getViewKey from \"../requests/getViewKey\";\nimport React, {useState,useEffect} from 'react';\nimport {Spinner, Button} from \"react-bootstrap\"\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    client,\n    viewKey,\n    setViewKey\n}) => {\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        if (client.ready && !viewKey.ready) {\n          const viewKeys = localStorage.getItem(\"vk\");\n          if (viewKeys && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS] && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]) {\n            setViewKey({\n              ready: true,\n              value: JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]\n            })\n          } else {\n            setViewKey({\n              ready: true,\n              value: null\n            })\n          }\n        }\n      }, [client, setViewKey, viewKey.ready])\n      \n    if (viewKey.ready && !viewKey.value) {\n        return (\n            <Button variant=\"primary\" onClick={async() => {\n                setLoading(true)\n                try {\n                    const response = await getViewKey(client.execute, ORDERS_FACTORY_ADDRESS)\n                    localStorage.setItem(\"vk\",JSON.stringify({[ORDERS_FACTORY_ADDRESS]: {[client.accountData.address]: response}}))\n                    setViewKey({\n                      ready: true,\n                      value: response\n                    })\n                } catch {}\n                setLoading(false)\n              }}>\n                  {\n                    loading ? <Spinner animation=\"border\" /> : \"Create View Key\"\n                  }\n            </Button>\n        )\n    } else {\n        return null\n    }\n}\n","import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner, Modal, DropdownButton, Dropdown, Table} from 'react-bootstrap'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    remountMyLimitOrders,\n    tokensData,\n    client,\n    viewKey\n}: MyLimitOrdersProps) => {\n    const [myLimitOrders, setMyLimitOrders] = useState<any>(null)\n\n    useEffect(() => {\n        async function init() {\n            setMyLimitOrders(await client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n                user_secret_order_books: {\n                    address: client.accountData.address,\n                    viewing_key: viewKey\n                }\n              }))\n          }\n        init()\n    }, [])\n\n    return (\n        <div>\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Creation Date</th>\n                        <th>Pair</th>\n                        <th>Type</th>\n                        <th>Status</th>\n                        <th>Limit Order</th>\n                        <th>Triggered Price</th>\n                        <th>Current Price</th>\n                        <th>Withdraw</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {!myLimitOrders && <Spinner animation=\"border\"/>}\n                {\n                    myLimitOrders && myLimitOrders.user_secret_order_books.user_secret_order_book &&\n                        myLimitOrders.user_secret_order_books.user_secret_order_book.map((orderBookAddress: string) => \n                            <MyLimitOrder \n                                orderBookAddress={orderBookAddress}\n                                remountMyLimitOrders={remountMyLimitOrders}\n                                tokensData={tokensData}\n                                client={client}\n                                viewKey={viewKey}\n                                myLimitOrders={myLimitOrders}\n                                setMyLimitOrders={setMyLimitOrders}\n                            />)\n                }\n                </tbody>\n            </Table>\n        </div>\n        \n    )\n}\n\n\nconst MyLimitOrder = ({\n    orderBookAddress,\n    remountMyLimitOrders,\n    tokensData,\n    client,\n    viewKey,\n    myLimitOrders,\n    setMyLimitOrders\n}: any) => {\n    const [limitOrdersData, setLimitOrdersData] = useState<any>(null)\n    const [orderBookTokensData, setOrderBookTokensData] = useState<any>(null)\n    const [ammPriceData, setAmmPriceData] = useState<any>(null)\n\n    useEffect(() => {\n        async function init() {\n            const limitOrderPromise = client.execute.queryContractSmart(orderBookAddress, { \n                get_limit_orders: {\n                    user_address: client.accountData.address,\n                    user_viewkey: viewKey\n                }\n              })\n\n            const orderBookTokenDataPromise = client.execute.queryContractSmart(orderBookAddress, { \n                order_book_pair_info: {}\n              })\n\n            const [limitOrders, orderBookTokenData] = await Promise.all([limitOrderPromise, orderBookTokenDataPromise]);\n\n            setLimitOrdersData(limitOrders)\n            setOrderBookTokensData(orderBookTokenData)\n\n            setAmmPriceData(await getAmmPrice(orderBookTokenData))\n\n            setInterval(async () => {\n                setLimitOrdersData(await client.execute.queryContractSmart(orderBookAddress, { \n                    get_limit_orders: {\n                        user_address: client.accountData.address,\n                        user_viewkey: viewKey\n                    }\n                  }));\n                setAmmPriceData(await getAmmPrice(orderBookTokenData))\n            },12000)\n          }\n        init()\n    }, [])\n\n\n    const getAmmPrice = async (orderBookTokenData: any) => {\n        return client.execute.queryContractSmart(orderBookTokenData.amm_pair_address, { \n            simulation: {\n                offer_asset: {\n                    info: {\n                        token: {\n                            ...orderBookTokenData.assets_info[0].token,\n                            viewing_key: \"\"\n                        }\n                    },\n                    amount: \"\" + Math.pow(10, tokensData.find((data: any) => data.dst_address === orderBookTokenData.assets_info[0].token.contract_addr).decimals)\n                }\n            }\n          })\n    }\n\n    const displayBalance = (index: number, limitOrderData:any, is_withdrew: boolean | null = null) => {\n        const tokenData = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[index].token.contract_addr);\n        if (!is_withdrew) {\n            return Math.round(limitOrderData.balances[index]/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000 + \" \" + tokenData.display_props.symbol\n        } else {\n            return Math.round(limitOrderData.withdrew_balance[index]/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000 + \" \" + tokenData.display_props.symbol\n        }\n    }\n\n    const displayPrice = (type: string, limitOrderData: any) => {\n        const token1Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n        const token2Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n        if (type === \"order\") {\n            return Math.round(limitOrderData.price/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 + \" \" + token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol \n        } else if (type === \"amm\") {\n            return Math.round(ammPriceData.return_amount/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 + \" \" + token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol \n        } else if (type === \"triggered\") {\n            if (limitOrderData.is_bid) {\n                return (Math.round(limitOrderData.deposit_amount/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000) / (Math.round(limitOrderData.balances[0]/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000) + \" \" +  token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol\n            } else {\n                return (Math.round(limitOrderData.balances[1]/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000) / (Math.round(limitOrderData.deposit_amount/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000) + \" \" +  token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol\n            }\n        }\n    }\n\n    const pairDisplay = () => {\n        const token1Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n        const token2Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n\n        return token1Data.display_props.symbol + \" / \" + token2Data.display_props.symbol \n    }\n\n    const findTokenData = (index: number) => \n        tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[index].token.contract_addr);\n\n    const getDepositedAmount = (limitOrderData: any) => {\n        const index = limitOrderData.is_bid ? 1 : 0;\n        const amount = Math.round(limitOrderData.deposit_amount/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000;\n\n        return \"Deposited: \" + amount + \" \" + findTokenData(index).display_props.symbol\n    }\n\n    const getExpectedAmount = (limitOrderData: any) => {\n        const index = limitOrderData.is_bid ? 0 : 1;\n        const amount = Math.round(limitOrderData.expected_amount/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000;\n\n        return \"Expected (>=): \" + amount + \" \" + findTokenData(index).display_props.symbol\n    }\n\n    const rowStyle = limitOrdersData && limitOrdersData.active_order ? {\n        backgroundColor: limitOrdersData.active_order.status === \"Filled\" ? \"#Cfffbc\" : \"#Fff4ad\"\n    } : undefined\n    \n    return (\n        <React.Fragment>\n            {\n                // active order\n                limitOrdersData && limitOrdersData.active_order &&\n                    <tr key={orderBookAddress} style={rowStyle}>\n                        <td>{new Date(limitOrdersData.active_order.timestamp*1000).toLocaleString()}</td>\n                        {orderBookTokensData && tokensData && <td>{pairDisplay()}</td>}\n                        <td>{limitOrdersData.active_order.is_bid ? \"Buy\" : \"Sell\"}</td>\n                        <td>{limitOrdersData.active_order.status}</td>\n                        {orderBookTokensData && \n                            <div>\n                                {displayPrice(\"order\", limitOrdersData.active_order)} <br/><br/>\n                                {getDepositedAmount(limitOrdersData.active_order)}<br/>\n                                {getExpectedAmount(limitOrdersData.active_order)}\n                            </div>}\n                        {<td>{\n                            <div>\n                                {\n                                    ammPriceData && \n                                    limitOrdersData.active_order.status === \"Filled\" ? \n                                    displayPrice(\"triggered\", limitOrdersData.active_order)\n                                    : \" - \"}\n                            </div>\n                        }</td>}\n                        {<td>{ammPriceData ? displayPrice(\"amm\", limitOrdersData.active_order) : \" - \"}</td>}\n                        {limitOrdersData && <td>{<Button onClick={ async () => {\n                            try{\n                                await client.execute.execute(orderBookAddress, { \n                                    withdraw_limit_order: {}\n                                })\n                                let update = {...myLimitOrders}\n                                let arr = update.user_secret_order_books.user_secret_order_book.filter((address: string) => address !== orderBookAddress)\n                                update.user_secret_order_books.user_secret_order_book = arr\n                                setMyLimitOrders(update)\n                                remountMyLimitOrders()\n                            } catch (e) {\n                                alert(\"error on widthdraw: \" + e)\n                            }\n                        }}>\n                            Widthdraw <br/>\n                            {limitOrdersData && orderBookTokensData && displayBalance(0, limitOrdersData.active_order) + \"  and  \" + displayBalance(1, limitOrdersData.active_order)}\n                        </Button>}</td>}\n                    </tr>\n            }\n            {\n                // active order\n                limitOrdersData && limitOrdersData.history_orders.length > 0 && \n                    limitOrdersData.history_orders.map((history_order:any) => \n                        <tr key={history_order.timestamp}>\n                            <td>{new Date(history_order.timestamp*1000).toLocaleString()}</td>\n                            {orderBookTokensData && tokensData && <td>{pairDisplay()}</td>}\n                            <td>{history_order.is_bid ? \"Buy\" : \"Sell\"}</td>\n                            <td>{history_order.status}</td>\n                            {orderBookTokensData && \n                                <div>\n                                    {displayPrice(\"order\", history_order)} <br/><br/>\n                                    {getDepositedAmount(history_order)}<br/>\n                                    {getExpectedAmount(history_order)}\n                                </div>}\n                            {<td>{\n                                <div>\n                                    {\n                                        ammPriceData && \n                                        history_order.status === \"Filled\" ? \n                                        displayPrice(\"triggered\", history_order)\n                                        : \" - \"}\n                                </div>\n                            }</td>}\n                            {<td> - </td>}\n                            {<td>Withdrew:  {history_order.withdrew_balance && orderBookTokensData && displayBalance(0, history_order, true) + \"  and  \" + displayBalance(1, history_order, true)}</td>}\n                        </tr>\n                    )\n            }\n        </React.Fragment>\n    )\n}\n\ntype MyLimitOrdersProps = {\n    ORDERS_FACTORY_ADDRESS: string,\n    remountMyLimitOrders: any,\n    client: any,\n    tokensData: any,\n    viewKey: string | null\n}\n","import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner, Modal, DropdownButton, Dropdown, Form, Nav} from 'react-bootstrap'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    AMM_FACTORY_ADDRESS,\n    ORDERS_FACTORY_ADDRESS,\n    tokensData,\n    client,\n    viewKey,\n    remountMyLimitOrders\n}: CreateNewLimitOrderProps) => {\n    const [showCreateLimitOrderModal, setShowCreateLimitOrderModal] = useState(false);\n    const [ammFactoryPairs, setAmmFactoryPairs] = useState<any>(null);\n    const [selectedAmmFactoryPairIndex, setSelectedAmmFactoryPairIndex] = useState<any>(null)\n\n    const [createLimitOrderLoading, setCreateLimitOrderLoading] = useState<boolean>(false);\n    const [selectedAmmPriceLoading, setSelectedAmmPairPriceLoading] = useState<boolean>(false);\n    const [selectedAmmPairPrice, setSelectedAmmPairPrice] = useState<any>(null);\n    const [orderBookPair, setOrderBookPair] = useState<any>({\n        isInstanciated: null,\n        data: null\n    })\n    const [limitOrderIsBidInput, setLimitOrderIsBidInput] = useState<boolean>(true);\n    const [limitOrderAmountInput, setLimitOrderAmountInput] = useState<any>(null);\n    const [limitOrderPriceInput, setLimitOrderPriceInput] = useState<any>(null);\n\n    useEffect(() => {\n        async function init() {\n            setAmmFactoryPairs(await client.execute.queryContractSmart(AMM_FACTORY_ADDRESS, { \n                pairs: {}\n              }));\n          }\n        init()\n    }, [])\n\n    useEffect(() => {\n        async function getData() {\n            if (selectedAmmFactoryPairIndex !== null) {\n                try {\n                    const responsePromiseAMM = getAmmPrice();\n                    const responsePromiseOrderBook = getOrderBook();\n    \n                    const [responseAMM, responseOrderBook] = await Promise.all([responsePromiseAMM,responsePromiseOrderBook]);\n    \n                    setSelectedAmmPairPrice(responseAMM)\n                    setSelectedAmmPairPriceLoading(false)\n                    setOrderBookPair({\n                        isInstanciated: responseOrderBook.secret_order_books.secret_order_book ? true : false,\n                        data: responseOrderBook.secret_order_books.secret_order_book\n                    })\n                } catch(e){alert(e)}\n            }\n        }\n        getData()\n    }, [selectedAmmFactoryPairIndex])\n\n    const getAmmPrice = async () => {\n        return client.execute.queryContractSmart(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr, { \n            simulation: {\n                offer_asset: {\n                    info: {\n                        ...ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0]\n                    },\n                    amount: \"\" + Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr).decimals)\n                }\n            }\n          })\n    }\n\n    const getOrderBook = async () => {\n        return client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n            secret_order_books: {\n                contract_address: ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr\n            }\n          })\n    }\n\n    const getTokenSymbol = (address: string) => {\n        const tokenData = tokensData.find((data: any) => data.dst_address === address);\n        return (tokenData ? tokenData.display_props.symbol : address)\n    } \n\n    const displaySymbolPair = (pair: any) => {\n        const token1Address = pair.asset_infos[0].token ? pair.asset_infos[0].token.contract_addr : pair.asset_infos[0].native_token.denom;\n        const token1Data = tokensData.find((data: any) => data.dst_address === token1Address);\n        const token2Address = pair.asset_infos[1].token ? pair.asset_infos[1].token.contract_addr : pair.asset_infos[1].native_token.denom;\n        const token2Data = tokensData.find((data: any) => data.dst_address === token2Address);\n        return (token1Data ? token1Data.display_props.symbol : token1Address) + \" / \" + (token2Data ? token2Data.display_props.symbol : token2Address) \n    }\n\n    const getCurrentPrice = () => {\n        if(selectedAmmPairPrice) {\n            const tokenData = tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr)\n            const otherTokenData = tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr)\n            return selectedAmmPairPrice.return_amount / Math.pow(10, tokenData.decimals) + \" \" + tokenData.display_props.symbol + \" per \" + otherTokenData.display_props.symbol\n        }\n                                    \n    }\n\n    return (\n        <div>\n            <Button onClick={() => setShowCreateLimitOrderModal(true)}>Create New Limit Order</Button>\n            <Modal show={showCreateLimitOrderModal} onHide={() => {\n                setShowCreateLimitOrderModal(false)\n                setSelectedAmmFactoryPairIndex(null)\n            }}>\n                <Modal.Header closeButton>\n                <Modal.Title>Create Limit Order</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        tokensData && ammFactoryPairs && \n                            <DropdownButton id=\"dropdown-basic-button\" title={\n                                selectedAmmFactoryPairIndex !== null ? \n                                    displaySymbolPair(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex])\n                                : \"Select Pair...\"\n                            }>\n                                {\n                                    ammFactoryPairs!.pairs.map((pair: any, index: number) =>\n                                        <Dropdown.Item key={pair.contract_addr} onClick={() => {\n                                            setSelectedAmmPairPriceLoading(true)\n                                            setSelectedAmmFactoryPairIndex(index)\n                                        }}>\n                                            {\n                                                displaySymbolPair(pair)\n                                            }\n                                        </Dropdown.Item>\n                                    )\n                                }   \n                            </DropdownButton>\n                    }\n                    {\n                        selectedAmmFactoryPairIndex !== null &&\n                        <div>\n                            <br/>\n                            { selectedAmmPriceLoading && <Spinner animation=\"border\"/> }\n                            { !selectedAmmPriceLoading && selectedAmmPairPrice && getCurrentPrice()}\n                            <br/>\n                            <br/>\n                            <Button style={{marginRight: \"20px\"}} variant={limitOrderIsBidInput ? \"success\" : \"light\"} onClick={() => { setLimitOrderIsBidInput(true)}}> \n                                    Buy \n                            </Button>\n                            <Button variant={!limitOrderIsBidInput ? \"danger\" : \"light\"} onClick={() => { setLimitOrderIsBidInput(false)}}> \n                                    Sell \n                            </Button>\n                            <br/>\n                            <br/>\n                            <label>{`Price of Limit Order (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr) + \")\"}</label><br/>\n                            <input onChange={(e) => setLimitOrderPriceInput(e.target.value)}></input><br/>\n                            <label>{\n                                limitOrderIsBidInput ?\n                                `Deposit Amount (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr) + \")\" \n                                :\n                                `Deposit Amount (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr) + \")\"\n                            }\n                            </label><br/>\n                            <input onChange={(e) => setLimitOrderAmountInput(e.target.value)}></input><br/>\n                            <label>{\n                                limitOrderIsBidInput ?\n                                `Expected Amount (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr) + \")\" \n                                :\n                                `Expected Amount (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr) + \")\"\n                            }\n                            </label><br/>\n                            <input disabled value={\n                                limitOrderAmountInput && limitOrderPriceInput ? \n                                    (\n                                        limitOrderIsBidInput ? (\"\" + limitOrderAmountInput/limitOrderPriceInput)\n                                        : (\"\" + limitOrderAmountInput*limitOrderPriceInput)\n                                    )\n                                : \"\"\n                            }></input><br/>\n                            <br/>\n                            { orderBookPair.isInstanciated === null && <Spinner animation=\"border\"/> }\n                            { orderBookPair.isInstanciated === true && \n                                <Button \n                                    style={{width: \"100%\"}}\n                                    variant={limitOrderIsBidInput ? \"success\" : \"danger\"}\n                                    onClick={async() => {\n                                        try {\n                                            if(\n                                                limitOrderAmountInput === null || limitOrderAmountInput === \"\" || limitOrderAmountInput === \"0\" ||\n                                                limitOrderPriceInput === null || limitOrderPriceInput === \"\" || limitOrderPriceInput === \"0\") {\n                                                throw Error(\"Bad Inputs\");\n                                            }   \n\n                                            const limitOrderExpectedAmount: any = \n                                                limitOrderIsBidInput ? (\"\" + limitOrderAmountInput/limitOrderPriceInput)\n                                                    : (\"\" + limitOrderAmountInput*limitOrderPriceInput)\n                                            // loading\n                                            setCreateLimitOrderLoading(true)\n                                            await client.execute.execute(\n                                                ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 1 : 0].token.contract_addr,\n                                                { \n                                                    send: {\n                                                        recipient: orderBookPair.data.contract_addr,\n                                                        amount: \"\" + Math.floor(limitOrderAmountInput*Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 1 : 0].token.contract_addr).decimals)),\n                                                        msg: btoa(JSON.stringify({\n                                                            create_limit_order: {\n                                                                is_bid: limitOrderIsBidInput,\n                                                                price: \"\" + Math.floor(limitOrderPriceInput*Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr).decimals)),\n                                                                expected_amount: \"\" + Math.floor(limitOrderExpectedAmount*Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 0 : 1].token.contract_addr).decimals)),\n                                                            }\n                                                        }))\n                                                    } \n                                                }\n                                            )\n                                            setCreateLimitOrderLoading(false)\n                                            // sair deste e fazer refresh do outro\n                                            setShowCreateLimitOrderModal(false)\n                                            setSelectedAmmFactoryPairIndex(null)\n                                            remountMyLimitOrders()\n                                        } catch (e) {\n                                            alert(e)\n                                            setCreateLimitOrderLoading(false)\n                                        }\n                                    }\n                                }> \n                                    {\n                                        createLimitOrderLoading ? <Spinner animation=\"border\"/> : limitOrderIsBidInput ? \"Buy\" : \"Sell\"\n                                    }\n                                </Button>\n                            }\n                            { orderBookPair.isInstanciated === false && \n                                <Button onClick={async() => {\n                                    try {\n                                        setOrderBookPair({\n                                            isInstanciated: null,\n                                            data: null\n                                        });\n                                        const hash = await client.execute.getCodeHashByContractAddr(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr)\n                                        await client.execute.execute(ORDERS_FACTORY_ADDRESS,  { \n                                            new_secret_order_book_instanciate: {\n                                                amm_pair_address: ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr,\n                                                amm_pair_hash: hash\n                                            } \n                                        })\n                                        const responseOrderBook = await getOrderBook();\n                                        setOrderBookPair({\n                                            isInstanciated: responseOrderBook.secret_order_books.secret_order_book ? true : false,\n                                            data: responseOrderBook.secret_order_books.secret_order_book\n                                        })\n                                    } catch (e) {\n                                        alert(e);\n                                        setOrderBookPair({\n                                            isInstanciated: false,\n                                            data: null\n                                        })\n                                    }\n                                }}> \n                                    Instanciate Order Book Pair\n                                </Button>\n                            }\n                        </div>\n                    }\n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => {\n                    setSelectedAmmFactoryPairIndex(null)\n                    setShowCreateLimitOrderModal(false)\n                }}>\n                    Close\n                </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n        )\n}\n\ntype CreateNewLimitOrderProps = {\n    AMM_FACTORY_ADDRESS: string,\n    ORDERS_FACTORY_ADDRESS: string,\n    client: any,\n    tokensData: any,\n    viewKey: string | null,\n    remountMyLimitOrders: any\n}\n\n","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SigningCosmWasmClient } from 'secretjs';\nimport ViewKeyButton from \"./Containers/ViewKeyButton\"\nimport MyLimitOrders from \"./Containers/MyLimitOrders\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CreateNewLimitOrder from \"./Containers/CreateNewLimitOrder\";\nimport axios from 'axios';\n\nconst AMM_FACTORY_ADDRESS=\"secret1ypfxpp4ev2sd9vj9ygmsmfxul25xt9cfadrxxy\"\nconst ORDERS_FACTORY_ADDRESS=\"secret1mqzhlna0ma2qwts84ljlrsa2pnj3u2ulw5vwyl\" \nconst SSCRT_CONTRACT_ADDRESS=\"secret1s7c6xp9wltthk5r6mmavql4xld5me3g37guhsx\"\n\nfunction App() {\n  const [client, setClient] = useState({\n    ready: false,\n    execute: null,\n    accountData: {\n      address: \"\"\n    }\n  });\n\n  const [viewKey, setViewKey] = useState({\n    ready: false,\n    value: null\n  });\n\n  const [tokensData, setTokensData] = useState<any>(null);\n  const [remountMyLimitOrdersCount, setRemountMyLimitOrdersCount] = useState<number>(0);\n\n  useEffect(() => {\n    async function init() {\n      setupKeplr(setClient);\n      try {\n        const response = await axios.get(\"https://scrt-bridge-api.azurewebsites.net/tokens/?page=0&size=1000\");\n        throw Error(\"\")\n          setTokensData([...response.data.tokens,{\n            dst_address: SSCRT_CONTRACT_ADDRESS,\n            decimals: 6,\n            display_props: {\n              symbol: \"sSCRT\"\n            }\n          },{\n            dst_address: \"secret1ha79qdkjsq7nyy8hagsggfq6zzlwshfmgfv3k0\",\n            decimals: 18,\n            display_props: {\n              symbol: \"sTST\"\n            }\n          },\n        ]);\n      } catch (e) {\n        setTokensData([{\n          dst_address: \"secret1ttg5cn3mv5n9qv8r53stt6cjx8qft8ut9d66ed\",\n          decimals: 18,\n          display_props: {\n            symbol: \"sETH\"\n          }\n        },{\n          dst_address: SSCRT_CONTRACT_ADDRESS,\n          decimals: 6,\n          display_props: {\n            symbol: \"sSCRT\"\n          }\n        },{\n          dst_address: \"secret1ha79qdkjsq7nyy8hagsggfq6zzlwshfmgfv3k0\",\n          decimals: 18,\n          display_props: {\n            symbol: \"sTST\"\n          }\n        },\n      ]);\n      }\n    }\n    init();\n  }, [])\n\n  const remountMyLimitOrders = () => setRemountMyLimitOrdersCount(remountMyLimitOrdersCount+1)\n\n  if(!client.ready) {\n    return <div>Loading...</div>\n  } else {\n    return (\n      <div className=\"App\">\n          <ViewKeyButton \n            ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n            client={client}\n            viewKey={viewKey}\n            setViewKey={setViewKey}\n          />\n          {\n            viewKey.value &&  \n              <div>\n                  <CreateNewLimitOrder \n                    ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                    AMM_FACTORY_ADDRESS={AMM_FACTORY_ADDRESS}\n                    tokensData={tokensData}\n                    client={client}\n                    viewKey={viewKey.value}\n                    remountMyLimitOrders={remountMyLimitOrders}\n                  /> \n                  <MyLimitOrders \n                    key={remountMyLimitOrdersCount} // Used to force remount this component\n                    remountMyLimitOrders={remountMyLimitOrders}\n                    ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                    tokensData={tokensData}\n                    client={client}\n                    viewKey={viewKey.value}\n                  />\n              </div>\n          }\n          \n          {\n            /*\n              <PairsAvailable \n                AMM_FACTORY_ADDRESS={AMM_FACTORY_ADDRESS}\n                ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                client={client}\n                viewKey={viewKey.value}\n              />\n            */\n          }\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst setupKeplr = async (setClient: any) => {\n  // Define sleep\n  const CHAIN_ID = \"holodeck-2\";\n  \n  const sleep = (ms: number) => new Promise((accept) => setTimeout(accept, ms));\n\n  // Wait for Keplr to be injected to the page\n  while (\n    !window.keplr &&\n    !window.getOfflineSigner &&\n    !window.getEnigmaUtils\n  ) {\n    await sleep(10);\n  }\n\n  // Use a custom chain with Keplr.\n  // On mainnet we don't need this (`experimentalSuggestChain`).\n  // This works well with `enigmampc/secret-network-sw-dev`:\n  //     - https://hub.docker.com/r/enigmampc/secret-network-sw-dev\n  //     - Run a local chain: `docker run -it --rm -p 26657:26657 -p 26656:26656 -p 1337:1337 -v $(shell pwd):/root/code --name secretdev enigmampc/secret-network-sw-dev`\n  //     - `alias secretcli='docker exec -it secretdev secretcli'`\n  //     - Store a contract: `docker exec -it secretdev secretcli tx compute store /root/code/contract.wasm.gz --from a --gas 10000000 -b block -y`\n  // On holodeck, set:\n  //     1. CHAIN_ID = \"holodeck-2\"\n  //     2. rpc = \"ttp://bootstrap.secrettestnet.io:26657\"\n  //     3. rest = \"https://bootstrap.secrettestnet.io\"\n  //     4. chainName = Whatever you like\n  // For more examples, go to: https://github.com/chainapsis/keplr-example/blob/master/src/main.js\n  await window.keplr.experimentalSuggestChain({\n    chainId: CHAIN_ID,\n    chainName: \"Local Secret Chain\",\n    rpc: \"http://bootstrap.secrettestnet.io:26657\",\n    rest: \"https://bootstrap.secrettestnet.io\",\n    bip44: {\n      coinType: 529,\n    },\n    coinType: 529,\n    stakeCurrency: {\n      coinDenom: \"SCRT\",\n      coinMinimalDenom: \"uscrt\",\n      coinDecimals: 6,\n    },\n    bech32Config: {\n      bech32PrefixAccAddr: \"secret\",\n      bech32PrefixAccPub: \"secretpub\",\n      bech32PrefixValAddr: \"secretvaloper\",\n      bech32PrefixValPub: \"secretvaloperpub\",\n      bech32PrefixConsAddr: \"secretvalcons\",\n      bech32PrefixConsPub: \"secretvalconspub\",\n    },\n    currencies: [\n      {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n    ],\n    gasPriceStep: {\n      low: 0.3,\n      average: 0.45,\n      high: 0.6,\n    },\n    features: [\"secretwasm\"],\n  });\n\n  // Enable Keplr.\n  // This pops-up a window for the user to allow keplr access to the webpage.\n  await window.keplr.enable(CHAIN_ID);\n\n  // Setup SecrtJS with Keplr's OfflineSigner\n  // This pops-up a window for the user to sign on each tx we sent\n  const keplrOfflineSigner = window.getOfflineSigner(CHAIN_ID);\n  const accounts = await keplrOfflineSigner.getAccounts();\n\n  const execute = await new SigningCosmWasmClient(\n    \"https://bootstrap.secrettestnet.io\", // holodeck - https://bootstrap.secrettestnet.io; mainnet - user your LCD/REST provider\n    accounts[0].address,\n    window.getOfflineSigner(CHAIN_ID),\n    window.getEnigmaUtils(CHAIN_ID),\n    {\n      // 300k - Max gas units we're willing to use for init\n      init: {\n        amount: [{ amount: \"500000\", denom: \"uscrt\" }],\n        gas: \"500000\",\n      },\n      // 300k - Max gas units we're willing to use for exec\n      exec: {\n        amount: [{ amount: \"500000\", denom: \"uscrt\" }],\n        gas: \"500000\",\n      },\n    }\n  )\n\n  const accountData = await execute.getAccount(accounts[0].address);\n  \n  setClient({\n    ready: true,\n    execute,\n    accountData\n  })\n}\n\ndeclare global {\n  interface Window { keplr: any, getOfflineSigner:any, getEnigmaUtils:any }\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}